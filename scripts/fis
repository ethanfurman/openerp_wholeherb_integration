#!/usr/local/sbin/suid-python --virtualenv
from __future__ import print_function, unicode_literals

from aenum import Enum
from collections import defaultdict
from itertools import cycle
from scription import *
from VSS.BBxXlate import fisData as fd
from VSS.BBxXlate.bbxfile import TableError, MissingTableError
from VSS.address import cszk, normalize_address, Rise, Sift, AddrCase, NameCase, BsnsCase, name_chars
from VSS.utils import fix_phone, fix_date
from antipathy import Path
import dbf
import random
import os
import re
import sys
from openerplib import get_connection, get_records, AttrDict
from openerplib.dates import str_to_datetime
from openerplib.dates import DEFAULT_SERVER_DATETIME_FORMAT as DT_FORMAT
from openerplib.dates import DEFAULT_SERVER_DATE_FORMAT as D_FORMAT

config = OrmFile(Path('%s/config/fnx.ini' % os.environ['VIRTUAL_ENV']))

## API

@Command(
        database=('which database to check', ),
        fis_id=('FIS ID of customer to check', ),
        )
def is_active_customer(database, fis_id):
    oe = connect_oe(database)
    customers = get_records(
            oe, 'res.partner',
            domain=[
                ('xml_id','=',fis_id),('module','=','CSMS'),
                '|',('active','=',False),('active','=',True)
                ],
            fields=['id', 'name', 'active'],
            )
    if not customers:
        error('%r not in OpenERP as a customer' % (fis_id, ))
        return None
    elif len(customers) > 1:
        error('data integrity error: multiple matches for CSMS:%s' % (fis_id, ))
        for cust in customers:
            error('  ', cust.name)
        return None
    [customer] = customers
    si_active = fis_id in get_active_salesinq_customers()
    oe_active = customer.active
    echo('[CSMS:%s] %s' % (fis_id, customer.name))
    echo('  active in SalesInq: %s' % (si_active, ))
    echo('  active in OpenERP:  %s' % (oe_active, ))
    last_accessed = res_partner.perm_read(ids=customer.id)
    echo('  last write date of %r by %r' % (
        str_to_datetime(last_accessed['write_date']).strftime(DT_FORMAT),
        last_accessed['write_uid']),
        )

@Command(
        tables=Spec('FIS file/number or disk file to operate on', MULTIREQ),
        all_tables=Spec('show all tables', FLAG, target='tables', default='--all', usage='all',),
        inclusive=Spec('showw bundled tables', FLAG),
        )
def info(tables, inclusive):
    all_tables = fd.tables.keys()
    if tables == '--all':
        fis_tables = all_tables
    else:
        fis_tables = list(tables)
    if inclusive:
        tgt_names = set([
                t['filename']
                for n, t in fd.tables.items()
                if n in fis_tables or t['filename'] in tables
                ])
        inc_tables = set()
        for n, t in fd.tables.items():
            if t['filename'] in tgt_names:
                inc_tables.add(n)
        fis_tables = list(inc_tables)
    fis_tables.sort()
    header = ['table','file','file #', '# records']
    if script_verbosity:
        header.append('fields')
        fields_width = 0
    else:
        header.extend(['rec-type', 'key-length'])
    rows = [header, None]
    row_widths = map(len, header)
    for t in fis_tables:
        row = []
        try:
            table = fd.fisData(t)
        except MissingTableError as exc:
            row = [t + ' -- missing  [%s]' % exc.template, '', '', '', '']
            if script_verbosity:
                row.append('')
        else:
            row.append('%s - %s' % (table.name, table.desc.strip('- ')))
            row.append('%s' % table.filename)
            row.append('%s' % (table.number or ''))
            row.append('%9s' % len(table))
            if script_verbosity:
                fields = []
                for fl in table.fieldlist:
                    if script_verbosity == 1 and not fl[3].startswith('An$'):
                        break
                    fields.append('%-10s: %s' % (fl[3], fl[1]))
                    fields_width = max(fields_width, len(fields[-1]))
                row.append('\n'.join(fields))
            else:
                rectype = ''
                if table.rectype:
                    rc_lines = []
                    for rc in table.rectype[0]:
                        if not rc.strip():
                            rc = 'BLANK'
                        rc_lines.append(rc)
                    rectype = '\n'.join(rc_lines)
                row.extend([rectype, '%10s' % table.key_length])
        rows.append(row)
        if script_verbosity and len(fis_tables) > 1:
            rows.append(None)
        widths = map(len, row)
        row_widths = map(max, zip(widths, row_widths))
    if rows[-1] is None:
        rows.pop()
    if script_verbosity:
        # limit fieldlist column
        row_widths[-1] = fields_width
    echo(rows, border='table', table_specs=(None, row_widths))


@Command(
        start=Spec('where to start checking', OPTION),
        )
def integrity_check(start=1):
    "check tables for key/record mismatches"
    i = start - 1
    while 'checking more tables':
        if i > 400:
            break
        i += 1
        try:
            table = fd.fisData(i)
        except TableError:
            cls, exc, tb = sys.exc_info()
            # import traceback
            # traceback.print_tb(tb)
            error('%10s  [%3d]:  %s' % (exc.filename, i, exc.__class__.__name__))
        except KeyError:
            pass
        else:
            if table.corrupted:
                error('%10s  [%3d]: %7d records,  %4d corrupted' % (table.filename, i, len(table), table.corrupted))
            else:
                print('%10s  [%3d]: %7d records' % (table.filename, i, len(table)))


@Command(
        filenum=Spec('file abbreviation or number to operate on', default='all', type=unicode.upper),
        which=Spec('which field to display', default='all', type=unicode.upper),
        )
def field_check(filenum, which):
    """
    Checks numeric fields for bad values.
    """
    if filenum != 'all':
        if filenum.isdigit():
            filenum = int(filenum)
        files = [filenum]
    else:
        files = [k for k in fd.tables if isinstance(k, (int, long))]
    for filenum in files:
        print('file: %s' % (filenum,), end=' ', verbose=0)
        try:
            table = fd.fisData(filenum)
        except TableError, exc:
            print('<%s>' % exc.__doc__, verbose=0)
            continue
        print(table.datamap)
        if which != 'all':
            fields = [which]
        else:
            fields = [f for f in table.datamap if '$' not in f]
        print('(%d records, %d numeric fields)' % (len(table), len(fields)), end='  ', verbose=0)
        ints = floats = 0
        bad_values = defaultdict(lambda: defaultdict(int))
        for record in table.values():
            for field in fields:
                val = record[field]
                try:
                    int(val)
                    ints += 1
                except ValueError:
                    try:
                        float(val)
                        floats += 1
                    except ValueError:
                        bad_values[field][val] += 1
        print('-- int: %s  --  float: %s' % (ints, floats), verbose=0)
        if bad_values:
            for field, values in bad_values.items():
                print('     %s: %s' % (field, ', '.join(repr(v) for v in values.items())), verbose=0)
        table.release()


@Command(
        table=Spec('FIS table to query', type=int),
        code=Spec('code to search for', ),
        fields=Spec('specific fields to display [default: all]', MULTI, type=int),
        )
def query(table, code, fields):
    key = table_keys.get(table)
    fis_table = fd.fisData(table, keymatch=key)
    for line in format_record(fis_table[code], fields):
        echo(line)


@Command(
        filenum=Spec('file abbreviation or number to operate on', ),
        which=Spec('which record to display', choices=['random', 'last', 'key', 'offset'], default='random'),
        id=Spec('key or offset if WHICH is key or offset', default=None),
        )
def record(filenum, which, id):
    if filenum.isdigit():
        filenum = int(filenum)
    if id and which not in ('key', 'offset'):
        abort('ID not allowed for %r' % (which, ))
    table = fd.fisData(filenum)
    print('using file', table.filename)
    if which == 'last':
        record = table.values()[-1]
    elif which == 'random':
        record = random.choice(table.values())
    elif which == 'offset':
        record = table.values()[int(id)]
    elif which == 'key':
        record = table[which]
    else:
        abort('unknown selection for WHICH: %r' % (which, ))
    print(record.rec)
    for line in format_record(record):
        echo(line)


@Command(
        filenum=Spec('file abbreviation or number to operate on', ),
        template=Spec('subset or rematch template to match many records to', ),
        code=Spec('code to match with template', force_default='', type=lambda s: s and tuple(s.split(',') or s)),
        fields=Spec('specific fields to display [default: all]', MULTI, type=int),
        dbf_name=Spec('dbf to create with data', OPTION),
        tabular=Spec('save output in tab-delimited mode [default: dump_<filenum>]', OPTION, None, default='dump'),
        rematch=Spec('template is a re match', FLAG, abbrev=('r', 're')),
        test=Spec('output in format usable by test_scripts', FLAG, abbrev=None),
        check_old=Spec('use older version of data files', FLAG, None),
        table=Spec('show output in a table', FLAG, None),
        )
def records(filenum, template, code, fields, dbf_name, tabular, rematch, test, check_old, table):
    print('fields requested: %s' % (fields, ))
    print('code given: %r' % (code, ))
    from fislib import schema as fis_schema
    show_table = table
    if filenum.isdigit():
        filenum = int(filenum)
    if template == 'default':
        if not isinstance(filenum, int):
            abort('unable to use default with file name')
        template = table_keys[filenum]
    target_path = check_old and config.network.fis_data_local_old_path or None
    if rematch:
        if not code:
            abort('CODE required for REMATCH match')
        code = code[0]
        fis_table = fd.fisData(filenum, rematch=template, data_path=target_path)
        print('using rematch and file', fis_table.filename, 'in', target_path or config.network.fis_data_local_path)
        records = fis_table.get_rekey(code) or []
    else:
        fis_table = fd.fisData(filenum, subset=template, data_path=target_path)
        print('using subset and file', fis_table.filename, 'in', target_path or config.network.fis_data_local_path)
        records = [v for k, v in fis_table.get_subset(code)]
    if test:
        try:
            enum = getattr(fis_schema, 'F%d' % fis_table.number)
        except AttributeError:
            abort('Table %r has no file number, unable to generate test output' % fis_table.filename)
    print('  found %d records' % (len(records), ))
    used_fields = []
    table_names = []
    if records:
        # get field defs now, may be needed for dbf creation
        record = records[0]
        print('widths:', record._widths, verbose=2)
        # max_data_width = record._width
        max_spec_width = 0
        field_widths = []
        dbf_types = []
        dbf_names = []
        if fields:
            fis_fields = [(i-1, record.fieldlist[i-1]) for i in fields]
        else:
            fis_fields = list(enumerate(record.fieldlist))
        for i, row in fis_fields:
            # j = i + 1
            print('checking for %d' % (i, ), end='... ', verbose=2)
            # if not fields or i in fields:
            print('keeping', end='', verbose=2)
            name, spec = row[1:4:2]
            if not name.strip() or name.strip().lower() == '(open)':
                continue
            table_names.append(name)
            max_spec_width = max(max_spec_width, len(spec.strip()))
            width = fis_table.field_widths[i]
            field_widths.append(width)
            field_name = convert_name(name, 10, dbf_names)
            dbf_names.append(field_name)
            name = convert_name(name, 50)
            if '$' in spec:
                dbf_types.append('%s C(%d)' % (field_name, width))
                used_fields.append((i, str))
            else:
                dbf_types.append('%s N(17,5)' % field_name)
                used_fields.append((i, float))
            print(verbose=2)
        if dbf_name:
            print('dbf fields:\n  ', '\n   '.join(dbf_types))
            table = dbf.Table(dbf_name, dbf_types).open(dbf.READ_WRITE)
    try:
        fields = [t[0] for t in used_fields]
        print('fields: %r' % (fields, ), border='flag', verbose=2)
        output = []
        for record in records:
            field_data = tuple(record[i] for i in fields)
            output.append(field_data)
            # for i, row in enumerate(fis_fields):
            lines = format_record(record, fields)
            if test:
                for i, datum in zip(fields, field_data):
                    echo('%s: %s,' % (enum[i-1], repr(datum).strip('u')))
            elif not dbf_name and not tabular and not show_table and not test and lines:
                echo('\n'.join(lines))
                try:
                    ans = input('[Continue|Quit]', default='continue')
                    if ans == 'quit':
                        raise KeyboardInterrupt
                except KeyboardInterrupt:
                    raise SystemExit(1)
            elif dbf_name:
                data = []
                for i, (_, converter) in enumerate(used_fields):
                    print(i, converter, verbose=3)
                    # cnv = converter[1]
                    data.append(converter(field_data[i]))
                print('field data:', data, verbose=3)
                table.append(tuple(data))
            if not dbf_name and not tabular and not show_table:
                echo()
        if tabular:
            if tabular == 'dump':
                tabular = 'dump_%03d' % filenum
            with open(tabular,'w') as fh:
                for record in output:
                    fh.write("\t".join(map(str,record))+"\n")
        if show_table:
            if table_names:
                echo([table_names, None] + output, border='table')
            else:
                error('no records found')
    except Exception:
        import traceback
        traceback.print_exc()
    finally:
        if records and dbf_name:
            table.close()


@Command(
        filenum=Spec('file abbreviation or number to display', ),
        output=Spec('output type', choices=['dump','enum'], default='dump'),
        number=Spec('number to use for enum output (when using an abbr for FILENUM)', OPTION, type=int),
        )
def schema(filenum, output, number):
    if filenum.isdigit():
        filenum = int(filenum)
    elif output == 'enum' and not number:
        abort('--number NNN must be given when using table abbreviations')
    table = fd.tables[filenum]
    if output == 'dump':
        max_width = 0
        for field in table['fields']:
            max_width = max(max_width, len(field[1]))
        max_width += 10
        echo(table['name'], table['desc'], table['filenum'])
        dotted = True
        field_num = 0
        last_field = None
        for i, field in enumerate(table['fields']):
            if not i % 3:
                dotted = not dotted
            name = '  ' + field[1]
            spec = field[3]
            current_field = spec.split('(')[0]
            if current_field != last_field or current_field.lower() == 'i':
                field_num += 1
                last_field = current_field
                display_field_num = '%2d' % field_num
            if dotted:
                name += '.' * (max_width - len(name))
            else:
                name += ' ' * (max_width - len(name))
            echo('%3d  %s' % (i+1, display_field_num), name, spec)
            display_field_num = '  '
    elif output == 'enum':
        echo('class F%s(FISenum):' % (number or filenum))
        echo('    """')
        echo('    %s - %s' % (table['name'], table['desc'].strip('-')))
        echo('    """')
        echo('    #')
        echo('    _init_ = "value sequence"')
        echo('    _order_ = lambda m: m.sequence')
        echo('    #')
        lines = []
        for i, field in enumerate(table['fields']):
            name, spec = field[1:4:2]
            comment = name
            name = convert_name(name)
            lines.append((name, spec, i, comment))
        #calculate widths
        max_name = max([len(n) for n, s, i, c in lines])
        max_spec = max([len(s) for n, s, i, c in lines]) + 2
        for name, spec, fld, comment in lines:
            if name:
                echo('    %-*s = %r, %*d     # %s' % (max_name, name, spec, max_spec-len(spec)+1, fld, comment))
            else:
                echo(' ' * (max_name + max_spec + 16), '# %s %s' % (comment, spec))
    else:
        abort('unknown output type: %s' % output)


@Command(
        )
def tables():
    "list FIS tables"
    keys = [k for k in fd.tables.keys() if not isinstance(k, (int,long))]
    # template = '%-7s: %s%s'
    keys.sort()
    for k in keys:
        t = fd.tables[k]
        echo('%-7s: %s%s' % (k, t['name'], t['desc']))


@Command(
        customers=('', FLAG, None),
        suppliers=('', FLAG, None),
        vendors=('', FLAG, None),
        carriers=('', FLAG, None),
        employees=('', FLAG, None),
        contacts=('include contacts', FLAG, None),
        products=('', FLAG, None),
        product_categories=('', FLAG, None),
        lots=('', FLAG, None),
        salesinq=('', FLAG, None),
        key=('only process key', OPTION, None)
        )
def update_openerp(customers, suppliers, vendors, carriers, employees, contacts, products, product_categories, lots, salesinq, key):
    "update OpenERP from FIS data"
    database = config.openerp.db
    global oe, partner_key
    oe = connect_oe(database)
    partner_key = '10%s'
    if key:
        partner_key %= key
    state_recs = get_records(oe, 'res.country.state')
    state_recs = dict([(r.name, (r.id, r.code, r.country_id[0])) for r in state_recs])
    country_recs = get_records(oe, 'res.country')
    country_recs_name = dict([(r.name, r.id) for r in country_recs])
    if customers:
        update_customers(contacts, state_recs, country_recs_name, key)
    if suppliers:
        update_suppliers(contacts, state_recs, country_recs_name)
    if vendors:
        update_vendors(contacts, state_recs, country_recs_name)
    if carriers:
        update_carriers(state_recs, country_recs_name)
    if employees:
        update_employees(state_recs, country_recs_name)
    if product_categories:
        update_product_categories()
    if products:
        update_products()
    if lots:
        update_lots()
    if salesinq:
        update_salesinq()


@Command(
        filenum=Spec('file abbreviation or number to operate on', ),
        subset=Spec('subset template to match many records to', ),
        code=Spec('code to match with template', force_default='', type=lambda s: s and tuple(s.split(',') or s)),
        fields=Spec('specific fields to display [default: all, counting starts with 0]', MULTI, type=int),
        )
def values(filenum, subset, code, fields):
    if not fields:
        abort('no FIELDS specified')
    # adjust for zero-based numbering
    fields = [i-1 for i in fields]
    if filenum.isdigit():
        filenum = int(filenum)
    fis_table = fd.fisData(filenum, subset=subset)
    table_spec = fd.tables[filenum]
    table_fields = []
    for i, row in enumerate(table_spec['fields']):
        if i not in fields:
            continue
        name, spec = row[1:4:2]
        table_fields.append((name, spec, set()))
    for rec in [v for k, v in fis_table.get_subset(code)]:
        for name, spec, values in table_fields:
            values.add(rec[spec])
    for name, spec, values in table_fields:
        print('%s:  ' % name, ', '.join([repr(v) for v in sorted(values)]), verbose=0)

# helpers

table_keys = {
    328: '10%s000010000',
    }

invalid_lot = re.compile('^new|po', re.I)

SALABLE = 2

def update_customers(contacts, state_recs, country_recs_name, search_key):
    context = {
        'mail_create_nosubscribe': True,
        'log_write_date': False,
        'fis_maintenance': True,
        }
    print('looking for', search_key)
    active_salesinq_customers = get_active_salesinq_customers()
    customer_codes = get_xml_id_map(model='res.partner', fis_module='csms')
    customer_last_write = dict([
        (d.id, d.write_date)
        for d in get_records(
            oe, 'res.partner',
            ids=customer_codes.values(),
            fields=['write_date'],
            context={'active_test':False},
            )])
    customer_ship_tos = get_xml_id_map(model='res.partner', fis_module='csmsbs')
    customers = fd.fisData('CSMS', keymatch='10%s ')
    print('%d customers in CSMS' % len(customers))
    ship_tos = fd.fisData('CSMSB', subset='10%s1')
    print('%d ship-to addresses in CSMSB' % len(ship_tos))
    two_year_cutoff = dbf.Date.today().replace(delta_year=-2).strftime(D_FORMAT)
    print('two year cutoff:', two_year_cutoff)
    customer_count = active_count = inactive_count = 0
    # alternate ship-tos exist in both CSMSB and CSMSS, but because
    # the final portion of the key is not specified in the schema, we can get them
    # all at once
    # process customers
    for cus_rec in ViewProgress(customers, 'Customers'):
        if search_key and search_key != cus_rec[F33.code]:
            print('skipping customer: %r != %r' % (search_key, cus_rec[F33.code]), verbose=2)
            continue
        customer_count += 1
        # rep = cus_rec[F33.salesrep]
        # rep = sales_people.get(rep, False)
        result = {'active': False}
        # result['user_id'] = rep
        result['is_company'] = True
        result['customer'] = True
        result['use_parent_address'] = False
        result['xml_id'] = key = cus_rec[F33.code]
        result['module'] = 'CSMS'
        # valid customer code? active account?
        if key in active_salesinq_customers or not active_salesinq_customers:
            # if active customers is empty, mark them all as active
            result['active'] = True
        result['name'] = customer_name = re.sub(
                config.fis_imports.name_from,
                config.fis_imports.name_to,
                BsnsCase(cus_rec[F33.name]),
                flags=re.I,
                )
        print('name:', result['name'], verbose=2)
        addr1, addr2, addr3 = Sift(cus_rec[F33.addr1], cus_rec[F33.addr2], cus_rec[F33.addr3])
        addr2, city, state, postal, country = cszk(addr2, addr3)
        addr3 = ''
        print('  ' + '\n  '.join([addr1, addr2, addr3, str([city, state, repr(postal)]), country]), verbose=2)
        if city and not (addr2 or state or postal or country):
            addr2, city = city, addr2
        addr1 = normalize_address(addr1)
        addr2 = normalize_address(addr2)
        addr1, addr2 = AddrCase(Rise(addr1, addr2))
        city = NameCase(city)
        state, country = NameCase(state), NameCase(country)
        result['street'] = addr1
        result['street2'] = addr2
        result['city'] = city
        result['zip'] = postal.code
        result['country_id'] = False
        result['state_id'] = False
        if state:
            result['state_id'] = state_recs[state][0]
            result['country_id'] = state_recs[state][2]
        elif country:
            country_id = country_recs_name.get(country, None)
            if country_id is None:
                # _logger.critical("Customer %s has invalid country <%r>" % (key, country))
                continue
            else:
                result['country_id'] = country_id
        result['phone'] = fix_phone(cus_rec[F33.tele])
        if not result['name']:
            # _logger.critical("Missing name for customer %s -- skipping" % (key, ))
            continue
        if key in customer_codes:
            print('found %s in OpenERP' % key, verbose=2)
            id = customer_codes[key]
            # if active is False, double-check lack of OpenERP activity for this account
            if not result['active']:
                print('%s is inactive in SalesInq, and has an OpenERP last-write date of %s' %
                        (key, customer_last_write[id]), verbose=2,
                        )
                if customer_last_write[id] > two_year_cutoff:
                    print('  but is active in OpenERP', verbose=2)
                    result['active'] = True
            if result['active']:
                active_count += 1
            else:
                inactive_count += 1
            print('updating with:', result, verbose=2)
            res_partner.write(id, result, context=context)
        else:
            active_count += 1
            result['imd_info'] = {'module':'whc', 'model':'res.partner', 'name':'csms_%s_res_partner'%key.replace('.','_')}
            print('creating with:', result, verbose=2)
            id = res_partner.create(result, context=context)
            customer_codes[key] = id
        cus_id = id
        default_ship_to = result.copy()
        # process contacts
        if contacts and cus_rec[F33.contact]:
            contact = cus_rec[F33.contact]
            result = {
                    'active': result['active'],
                    }
            result['name'] = re.sub(
                    config.fis_imports.name_from,
                    config.fis_imports.name_to,
                    NameCase(contact),
                    flags=re.I,
                    )
            result['is_company'] = False
            result['customer'] = True
            result['parent_id'] = cus_id
            result['use_parent_address'] = True
            result['xml_id'] = contact_key = 'cntct_' + key
            result['module'] = 'CSMS'
            if contact_key in customer_codes:
                print('updating contact with:', result, verbose=2)
                id = customer_codes[contact_key]
                res_partner.write(id, result, context=context)
            else:
                result['imd_info'] = {'module':'whc', 'model':'res.partner', 'name':'csms_cntct_%s_res_partner'%key.replace('.','_')}
                print('creating contact with:', result, verbose=2)
                id = res_partner.create(result, context=context)
                customer_codes[contact_key] = id
        # process alternate ship-tos
        alternates = ship_tos.get_subset(key)
        for _, ship_to in sorted(alternates):
            result = {
                    'active': result['active'],
                    }
            result['parent_id'] = False
            result['ship_to_parent_id'] = cus_id
            result['is_company'] = False
            result['customer'] = False
            result['use_parent_address'] = False
            result['module'] = 'CSMSBS'
            if ship_to is None:
                result.update(default_ship_to)
                result['xml_id'] = ship_to_key = 'ship_' + key + '100'
                print('  ship-to:', ship_to_key, verbose=2)
            else:
                short_ship_to = '%s-%s' % (ship_to[F140.code], (ship_to[F140.ship_to_sequence].strip() or '00'))
                result['xml_id'] = ship_to_key = 'ship_' + short_ship_to
                print('  ship-to:', ship_to_key, verbose=2)
                result['name'] = '%s: %s' % (
                        short_ship_to,
                        re.sub(
                            config.fis_imports.name_from,
                            config.fis_imports.name_to,
                            BsnsCase(ship_to[F140.name]),
                            flags=re.I,
                            ) or customer_name
                        )
                addr1, addr2, addr3 = Sift(ship_to[F140.addr1], ship_to[F140.addr2], ship_to[F140.addr3])
                addr2, city, state, postal, country = cszk(addr2, addr3)
                addr3 = ''
                print('    ' + '\n    '.join([addr1, addr2, addr3, str([city, state, repr(postal)]), country]), verbose=2)
                if city and not (addr2 or state or postal or country):
                    addr2, city = city, addr2
                addr1 = normalize_address(addr1)
                addr2 = normalize_address(addr2)
                addr1, addr2 = AddrCase(Rise(addr1, addr2))
                city = NameCase(city)
                state, country = NameCase(state), NameCase(country)
                result['street'] = addr1
                result['street2'] = addr2
                result['city'] = city
                result['zip'] = postal.code
                result['country_id'] = False
                result['state_id'] = False
                if state:
                    result['state_id'] = state_recs[state][0]
                    result['country_id'] = state_recs[state][2]
                elif country:
                    country_id = country_recs_name.get(country, None)
                    if country_id is None:
                        # _logger.critical("Customer %s has invalid country <%r>" % (key, country))
                        continue
                    else:
                        result['country_id'] = country_id
                result['phone'] = fix_phone(ship_to[F140.tele])
            if ship_to_key in customer_ship_tos:
                # do not overwrite a possibly user-updated name
                del result['name']
                print('updating ship-to with:', result, verbose=2)
                id = customer_ship_tos[ship_to_key]
                res_partner.write(id, result, context=context)
            else:
                result['imd_info'] = {'module':'whc', 'model':'res.partner', 'name':'csmsbs_%s_res_partner'%ship_to_key.replace('.','_')}
                print('creating ship-to with:', result, verbose=2)
                id = res_partner.create(result, context=context)
                customer_ship_tos[ship_to_key] = id
    print('total customers processed: %5d' % customer_count)
    print('                   active: %5d' % active_count)
    print('                 inactive: %5d' % inactive_count)


def update_suppliers(contacts, state_recs, country_recs_name ):
    supplier_codes = get_xml_id_map(model='res.partner', fis_module='posm')
    posm = fd.fisData('POSM', keymatch=partner_key)
    context = {'mail_create_nosubscribe': True, 'fis_maintenance': True}
    print('processing %d POSM records' % len(posm))
    for sup_rec in posm:
        result = {'active': False}
        result['is_company'] = True
        result['supplier'] = True
        result['customer'] = False
        result['use_parent_address'] = False
        result['xml_id'] = key = sup_rec[F163.code]
        result['module'] = 'POSM'
        # valid customer code? active account?
        result['active'] = True
        result['name'] = re.sub(
                config.fis_imports.name_from,
                config.fis_imports.name_to,
                BsnsCase(sup_rec[F163.name]),
                flags=re.I,
                )
        print('name:', result['name'])
        addr1, addr2, addr3 = Sift(sup_rec[F163.addr1], sup_rec[F163.addr2], sup_rec[F163.addr3])
        addr2, city, state, postal, country = cszk(addr2, addr3)
        addr3 = ''
        print('  ' + '\n  '.join([addr1, addr2, addr3, str([city, state, postal]), country]), verbose=2)
        if city and not (addr2 or state or postal or country):
            addr2, city = city, addr2
        addr1 = normalize_address(addr1)
        addr2 = normalize_address(addr2)
        addr1, addr2 = AddrCase(Rise(addr1, addr2))
        city = NameCase(city)
        state, country = NameCase(state), NameCase(country)
        result['street'] = addr1
        result['street2'] = addr2
        result['city'] = city
        result['zip'] = postal.code
        result['country_id'] = False
        result['state_id'] = False
        if state:
            result['state_id'] = state_recs[state][0]
            result['country_id'] = state_recs[state][2]
        elif country:
            country_id = country_recs_name.get(country, None)
            if country_id is None:
                # _logger.critical("Customer %s has invalid country <%r>" % (key, country))
                continue
            else:
                result['country_id'] = country_id
        result['phone'] = fix_phone(sup_rec[F163.tele])
        if not result['name']:
            # _logger.critical("Missing name for customer %s -- skipping" % (key, ))
            continue
        if key in supplier_codes:
            id = supplier_codes[key]
            res_partner.write(id, result, context=context)
        else:
            result['imd_info'] = {'module':'whc', 'model':'res.partner', 'name':'posm_%s_res_partner'%key.replace('.','_')}
            id = res_partner.create(result, context=context)
            supplier_codes[key] = id

def update_vendors(contacts, state_recs, country_recs_name ):
    vendor_codes = get_xml_id_map(model='res.partner', fis_module='vnms')
    vnms = fd.fisData('VNMS', keymatch=partner_key)
    context = {'mail_create_nosubscribe': True, 'fis_maintenance': True}
    for ven_rec in vnms:
        result = {'active': False}
        result['is_company'] = True
        result['supplier'] = True
        result['customer'] = False
        result['use_parent_address'] = False
        result['xml_id'] = key = ven_rec[F65.code]
        result['module'] = 'VNMS'
        # valid customer code? active account?
        result['active'] = True
        result['name'] = re.sub(
                config.fis_imports.name_from,
                config.fis_imports.name_to,
                BsnsCase(ven_rec[F65.name]),
                flags=re.I,
                )
        print('name:', result['name'])
        addr1, addr2, addr3 = Sift(ven_rec[F65.addr1], ven_rec[F65.addr2], ven_rec[F65.addr3])
        addr2, city, state, postal, country = cszk(addr2, addr3)
        addr3 = ''
        print('  ' + '\n  '.join([addr1, addr2, addr3, str([city, state, postal]), country]), verbose=2)
        if city and not (addr2 or state or postal or country):
            addr2, city = city, addr2
        addr1 = normalize_address(addr1)
        addr2 = normalize_address(addr2)
        addr1, addr2 = AddrCase(Rise(addr1, addr2))
        city = NameCase(city)
        state, country = NameCase(state), NameCase(country)
        result['street'] = addr1
        result['street2'] = addr2
        result['city'] = city
        result['zip'] = postal.code
        result['country_id'] = False
        result['state_id'] = False
        if state:
            result['state_id'] = state_recs[state][0]
            result['country_id'] = state_recs[state][2]
        elif country:
            country_id = country_recs_name.get(country, None)
            if country_id is None:
                # _logger.critical("Customer %s has invalid country <%r>" % (key, country))
                continue
            else:
                result['country_id'] = country_id
        result['phone'] = fix_phone(ven_rec[F65.tele])
        if not result['name']:
            # _logger.critical("Missing name for customer %s -- skipping" % (key, ))
            continue
        if key in vendor_codes:
            id = vendor_codes[key]
            res_partner.write(id, result, context=context)
        else:
            result['imd_info'] = {'module':'whc', 'model':'res.partner', 'name':'vnms_%s_res_partner'%key.replace('.','_')}
            id = res_partner.create(result, context=context)
            vendor_codes[key] = id

def update_carriers(contacts, state_recs, country_recs_name ):
    carrier_codes = get_xml_id_map(model='res.partner', fis_module='F27')
    carrier = fd.fisData(27, keymatch='SV%s')
    context = {'mail_create_nosubscribe': True, 'fis_maintenance': True}
    for carrier_rec in carrier:
        result = {'active': False}
        result['is_company'] = True
        result['supplier'] = True
        result['customer'] = False
        result['use_parent_address'] = False
        result['xml_id'] = key = carrier_rec[F27.code]
        result['module'] = 'VNMS'
        # valid customer code? active account?
        result['active'] = True
        result['name'] = re.sub(
                config.fis_imports.from_name,
                config.fis_imports.to_name,
                BsnsCase(carrier_rec[F27.name]),
                flags=re.I,
                )
        print('name:', result['name'])
        addr1, addr2, addr3 = Sift(carrier_rec[F27.addr1], carrier_rec[F27.addr2], carrier_rec[F27.addr3])
        addr2, city, state, postal, country = cszk(addr2, addr3)
        addr3 = ''
        print('  ' + '\n  '.join([addr1, addr2, addr3, str([city, state, postal]), country]), verbose=2)
        if city and not (addr2 or state or postal or country):
            addr2, city = city, addr2
        addr1 = normalize_address(addr1)
        addr2 = normalize_address(addr2)
        addr1, addr2 = AddrCase(Rise(addr1, addr2))
        city = NameCase(city)
        state, country = NameCase(state), NameCase(country)
        result['street'] = addr1
        result['street2'] = addr2
        result['city'] = city
        result['zip'] = postal.code
        result['country_id'] = False
        result['state_id'] = False
        if state:
            result['state_id'] = state_recs[state][0]
            result['country_id'] = state_recs[state][2]
        elif country:
            country_id = country_recs_name.get(country, None)
            if country_id is None:
                # _logger.critical("Customer %s has invalid country <%r>" % (key, country))
                continue
            else:
                result['country_id'] = country_id
        result['phone'] = fix_phone(carrier_rec[F27.tele])
        if not result['name']:
            # _logger.critical("Missing name for customer %s -- skipping" % (key, ))
            continue
        if key in carrier_codes:
            id = carrier_codes[key]
            res_partner.write(id, result, context=context)
        else:
            result['imd_info'] = {'module':'whc', 'model':'res.partner', 'name':'cnvzsv_%s_res_partner'%key.replace('.','_')}
            id = res_partner.create(result, context=context)
            carrier_codes[key] = id

def update_employees(contacts, state_recs, country_recs_name ):
    employee_codes = get_xml_id_map(model='res.partner', fis_module='F74')
    emp1 = fd.fisData('EMP1', keymatch='10%s')
    context = {'mail_create_nosubscribe': True, 'fis_maintenance': True}
    for emp_rec in emp1:
        result = {'active': False}
        result['is_company'] = True
        result['supplier'] = True
        result['customer'] = False
        result['use_parent_address'] = False
        result['xml_id'] = key = emp_rec[F74.code]
        result['module'] = 'VNMS'
        # valid customer code? active account?
        result['active'] = True
        result['name'] = re.sub(
                config.fis_imports.from_name,
                config.fis_imports.to_name,
                BsnsCase(emp_rec[F74.name]),
                flags=re.I,
                )
        print('name:', result['name'])
        addr1, addr2, addr3 = Sift(emp_rec[F74.addr1], emp_rec[F74.addr2], emp_rec[F74.addr3])
        addr2, city, state, postal, country = cszk(addr2, addr3)
        addr3 = ''
        print('  ' + '\n  '.join([addr1, addr2, addr3, str([city, state, postal]), country]), verbose=2)
        if city and not (addr2 or state or postal or country):
            addr2, city = city, addr2
        addr1 = normalize_address(addr1)
        addr2 = normalize_address(addr2)
        addr1, addr2 = AddrCase(Rise(addr1, addr2))
        city = NameCase(city)
        state, country = NameCase(state), NameCase(country)
        result['street'] = addr1
        result['street2'] = addr2
        result['city'] = city
        result['zip'] = postal.code
        result['country_id'] = False
        result['state_id'] = False
        if state:
            result['state_id'] = state_recs[state][0]
            result['country_id'] = state_recs[state][2]
        elif country:
            country_id = country_recs_name.get(country, None)
            if country_id is None:
                # _logger.critical("Customer %s has invalid country <%r>" % (key, country))
                continue
            else:
                result['country_id'] = country_id
        result['phone'] = fix_phone(emp_rec[F74.tele])
        if not result['name']:
            # _logger.critical("Missing name for customer %s -- skipping" % (key, ))
            continue
        if key in employee_codes:
            id = employee_codes[key]
            res_partner.write(id, result, context=context)
        else:
            result['imd_info'] = {'module':'whc', 'model':'res.partner', 'name':'emp1_%s_res_partner'%key.replace('.','_')}
            id = res_partner.create(result, context=context)
            employee_codes[key] = id

def update_product_categories():
    context = {'mail_create_nosubscribe': True, 'fis_maintenance': True}
    category_codes = get_xml_id_map(model='product.category', fis_module='CNVZc')
    cnvz = fd.fisData('CNVZc', keymatch='c10%s')
    for category_rec in ViewProgress(cnvz, 'Categories'):
        key = category_rec[F116.code]
        name = category_rec[F116.desc].title()
        values = {
                'xml_id': key,
                'name': name,
                'module': 'CNVZc',
                'parent_id': SALABLE,
                }
        if key in category_codes:
            # update
            id = category_codes[key]
            product_category.write(id, values, context=context)
        else:
            # create
            new_id = product_category.create(values, context=context)
            category_codes[key] = new_id

def update_products():
    context = {'mail_create_nosubscribe': True, 'fis_maintenance': True}
    product_codes = get_xml_id_map(model='product.product', fis_module='nvty')
    category_codes = get_xml_id_map(model='product.category', fis_module='CNVZc')
    default_product_codes = get_records(oe, model='product.product', domain=[('xml_id','=',False),('default_code','!=',False)])
    nvty = fd.fisData('NVTY', keymatch='10%s')
    for item in ViewProgress(nvty, 'Products'):
        key = item[F135.item_id]
        name = NameCase(name_chars(' - '.join(item[F135.name].split('\x10'))))
        values = {
                'xml_id': key,
                'module': 'NVTY',
                'latin': item[F135.latin_name],
                'categ_id': category_codes.get(item[F135.product_category], SALABLE)
                }
        if name:
            values['name'] = name
        try:
            id = None
            if key in product_codes:
                # update existing FIS record
                id = product_codes[key]
                print('  updating with:', values, verbose=2)
                product.write(id, values, context=context)
            elif key in default_product_codes:
                # update existing default_code record
                id = default_product_codes[key]
                print('  updating with:', values, verbose=2)
                product.write(id, values, context=context)
            else:
                values['imd_info'] = {'module':'whc', 'model':'product.product', 'name':'nvty_%s_product_product'%key.replace('.','_')}
                print('  creating with:', values, verbose=2)
                product_codes[key] = product.create(values, context=context)
        except:
            error('unable to create/write id: %r  values: %r' % (id, values))
            raise

def update_lots():
    context = {'mail_create_nosubscribe': True, 'fis_maintenance': True}
    print('getting products from OpenERP')
    product_codes = get_xml_id_map('product.product', fis_module='nvty')
    print('getting default product codes from OpenERP')
    default_product_codes = dict([
        (p.default_code, p.id)
        for p in get_records(
            oe, model='product.product',
            domain=[('xml_id','=',False),('default_code','!=',False)],
            )])
    product_lot = oe.get_model('wholeherb_integration.product_lot')
    print('getting lots from OpenERP')
    oe_lots = dict([
        (l.lot_no, l)
        for l in get_records(product_lot)
        ])
    nvba = fd.fisData('NVBA', subset='10')
    seen_lots = set()
    added = changed = zeroed = 0
    for lot in ViewProgress(nvba, 'Product Lots'):
        values = {}
        values['lot_no'] = lot_no = lot[F250.lot_no]
        prod_xml_id = lot[F250.item_id]
        print('processing %-8s, lot %-10s...  ' % (prod_xml_id, lot_no, ), end='', verbose=3)
        if lot[F250.wrhse_id] != '0SON':
            print('skipping -- wrong warehouse (%r)' % (lot[F250.wrhse_id], ), verbose=3)
            continue
        if not lot_no:
            print('skipping -- missing lot number (%r)' % (lot, ), verbose=3)
            continue
        if invalid_lot.match(lot_no):
            print('skipping -- invalid lot number', verbose=3)
            continue
        values['qty_remain'] = lot[F250.qty_on_hand]
        values['date_received'] = guess_date(lot[F250.prod_receipt_date])
        if prod_xml_id in product_codes:
            prod_id = product_codes[prod_xml_id]
        elif prod_xml_id in default_product_codes:
            prod_id = default_product_codes[prod_xml_id]
        else:
            # no proper item, ignore lot
            print('skipping -- product %r not in OpenERP' % (prod_xml_id, ), verbose=3)
            continue
        seen_lots.add(lot_no)
        values['product_id'] = prod_id
        if lot_no in oe_lots:
            # update existing record
            id = oe_lots[lot_no].id
            print('  updating with:', values, verbose=3)
            product_lot.write(id, values, context=context)
            if values['qty_remain'] == 0:
                zeroed += 1
            else:
                changed += 1
        else:
            values['imd_info'] = {
                    'module':'whc',
                    'model':'wholeherb_integration.product_lot',
                    'name':'nvba_%s_wholeherb_integration_product_lot'%prod_xml_id.replace('.','_'),
                    }
            print('  creating with:', values, verbose=3)
            oe_lots[lot_no] = AttrDict(**values)
            oe_lots[lot_no].id = product_lot.create(values, context=context)
            added += 1
    print('seen lots: %r' % (seen_lots, ), verbose=2)
    empty_lot_ids = [
            l.id
            for l in get_records(
                oe, 'wholeherb_integration.product_lot',
                domain=[('lot_no','not in',list(seen_lots)),('qty_remain','!=',0)],
                fields=['id'],
                )]
    print('zeroing out %d records no longer in system' % len(empty_lot_ids))
    product_lot.write(empty_lot_ids, {'qty_remain': 0}, context=context)
    zeroed += len(empty_lot_ids)
    print('%3d records added\n%3d records changed\n%3d records zeroed'
            % (added, changed, zeroed))


def update_salesinq():
    res_partner = oe.get_model('res.partner')
    active_customers = get_active_salesinq_customers()
    oe_customers = get_records(
            res_partner,
            domain=[('customer','=',True)],
            fields=['id','xml_id','is_salesinq_able'],
            )
    added = 0
    removed = 0
    for customer in oe_customers:
        if not customer.xml_id:
            if customer.is_salesinq_able:
                res_partner.write(customer.id, {'is_salesinq_able': False})
                removed += 1
        elif customer.is_salesinq_able and customer.xml_id not in active_customers:
            res_partner.write(customer.id, {'is_salesinq_able': False})
            removed += 1
        elif not customer.is_salesinq_able and customer.xml_id in active_customers:
            res_partner.write(customer.id, {'is_salesinq_able': True})
            added += 1
    print('%d records activated\n%d records deactivated' % (added, removed))

def format_record(record, fields=None):
    lines = []
    name_width = value_width = 0
    if not fields:
        fields = range(len(record.fieldlist))
    for i, row in enumerate(record.fieldlist):
        if i in fields:
            name_width = max(len(row[3]), name_width)
            value_width = max(len(str(record[row[3]]).replace('\0','').strip()), value_width)
            print('field %d -> name width: %d   value width: %d' % (i, name_width, value_width), verbose=3)
    print(verbose=3)
    for i, row in enumerate(record.fieldlist):
        if i in fields:
            value = record[row[3]]
            if isinstance(value, basestring):
                value = value.replace('\0', '').strip()
            print('field %d -> %r' % (i, value), verbose=3)
            if '$' in row[3]:
                lines.append('%5d | %*s | %*s | %s' % (i+1, -name_width, row[3], -value_width, value, row[1]))
            else:
                lines.append('%5d | %*s | %*s | %s' % (i+1, -name_width, row[3], value_width, value, row[1]))
    return lines

def convert_name(name, max_len, existing_names=()):
    original_name = name
    name = name.lower()
    if '(' in name:
        name = name.split('(')[0]
    name = name.replace('.', '')
    for text in (' code', ' codes'):
        if name.endswith(text):
            name = name[:-len(text)+1] + 'id' + ('', 's')[text[-1] == 's']
            break
    pieces = name.split()
    if pieces and pieces[0].isdigit() and pieces[1:2] == ['spaces']:
        pieces = pieces[2:]
    for i, p in enumerate(pieces):
        if len(p) == 3 and '/' in p:
            pieces[i] = p[0] + p[2]
    name = ' '.join(pieces)
    if name.startswith(('key type', 'key group')):
        name = 'key type'
    members = []
    # name substitution
    for i, piece in enumerate(re.sub('\W+', ' ', name).split()):
        if i == 0 and piece[0].isdigit():
            piece = numbers.get(piece, piece)
        else:
            piece = common.get(piece, piece)
        members.append(piece)
    # shrink further as necessary
    def no_under(names):
        return ''.join(names)
    def pop_under(names):
        # if we get down to only one name, just trim it to desired size
        if len(names) == 1:
            return names[0][:max_len]
        names.pop()
        return '_'.join(names)
    name = '_'.join(members)
    shrinker = cycle([no_under, pop_under])
    # shrink name if needed
    if len(name) > max_len:
        # first try uncommon abbr
        for i, m in enumerate(members):
            members[i] = uncommon.get(m, m)
        name = '_'.join(members)
    while len(name) > max_len:
        func = next(shrinker)
        name = func(members)
    # check for name already being used
    for suffix in range(1, 10):
        if name not in existing_names:
            break
        else:
            suffix = str(suffix)
            name = name[:-1] + suffix
    else:
        # name still taken
        raise Exception(
                'unable to convert %r\nexisting names: '
                % (original_name, ', '.join(existing_names)
                ))
    return name


numbers = {
    '0':    'zero',
    '1':    'one',
    '2':    'two',
    '3':    'three',
    '4':    'four',
    '5':    'five',
    '6':    'six',
    '7':    'seven',
    '8':    'eight',
    '9':    'nine',
    '10':   'ten',
    '1st':  'first',
    '2nd':  'second',
    '3rd':  'third',
    '4th':  'fourth',
    '5th':  'fifth',
    '6th':  'sixth',
    '7th':  'seventh',
    '8th':  'eighth',
    '9th':  'ninth',
    '10th': 'tenth',
    }

common = {
    'account':      'acct',
    'adjustment':   'adj',
    'allowance':    'allwnc',
    'amount':       'amt',
    'authority':    'auth',
    'center':       'ctr',
    'centering':    'ctr',
    'check':        'chk',
    'credit':       'cr',
    'credits':      'crs',
    'customer':     'cust',
    'debit':        'dr',
    'debits':       'drs',
    'department':   'dept',
    'description':  'desc',
    'discount':     'disc',
    'ingredient':   'ingr',
    'length':       'len',
    'invoice':      'inv',
    'number':       'no',
    'numbers':      'nos',
    'payment':      'pymt',
    'product':      'prod',
    'production':   'prod',
    'position':     'pos',
    'quantity':     'qty',
    'revision':     'rev',
    'sequence':     'seq',
    'string':       'str',
    'transaction':  'trans',
    }

uncommon = {
    'adjust':       'adj',
    'company':      'comp',
    'other':        'oth',
    'total':        'ttl',
    }

def connect_oe(database, connection=[]):
    global res_partner, product, product_category
    if not connection:
        print('using %r and %r to connect to %r:%r' % ('fis_daemon', config.openerp.pw, config.openerp.host, database))
        connection.append(
                get_connection(
                    database=database,
                    login='fis_daemon',
                    password=config.openerp.pw,
                    hostname=config.openerp.host,
                    ))
    res_partner = connection[0].get_model('res.partner')
    product = connection[0].get_model('product.product')
    product_category = connection[0].get_model('product.category')
    return connection[0]

def guess_date(text):
    if not text.strip():
        return False
    one, two, three = text[:2], text[2:4], text[4:]
    if not one.isdigit() or int(one) > 31:
        return fix_date(text, format='ymd').strftime(D_FORMAT)
    elif not three.isdigit() or int(three) > 31 or int(two) > 12:
        return fix_date(text, format='mdy').strftime(D_FORMAT)
    else:
        return False

def get_xml_id_map(model, fis_module, ids=None):
    "return {xml_id: id} for all xml_ids in module"
    imd = oe.get_model('ir.model.data')
    # model = model.replace('.','_')
    result = {}
    # domain=[('module','=','whc'),('model','=',model),('name','=ilike','%s_%%'%fis_module)],
    for rec in get_records(
            imd,
            domain=[('module','=','whc'),('model','=',model),('name','=ilike','%s_%%'%fis_module)],
            skip_fields=['is_salesinq_able', 'salesinq_data', 'image', 'image_small', 'image_medium'],
            ):
        if ids is None or rec.res_id in ids:
            name = rec.name[len(fis_module):-len(model)][1:-1]
            result[name] = rec.res_id
    return result

def get_active_salesinq_customers():
    import requests
    result = set()
    if config.network.active_customer_url:
        try:
            web_data = requests.get(config.network.active_customer_url)
        except requests.exceptions.ConnectionError:
            pass
        else:
            companies = re.findall(r'<th.*?>(.*?)</th>', web_data.text)
            for line in companies:
                fis_id = line.split()[0]
                if fis_id.isdigit():
                    result.add(fis_id)
                    print(line, verbose=3)
    print('found %d active companies' % len(result))
    return result

def get_all_salesinq_customers():
    import requests
    result = dict()
    if not config.network.all_customer_url:
        error('salesinq url not defined')
    else:
        try:
            web_data = requests.get(config.network.all_customer_url)
        except requests.exceptions.ConnectionError:
            error('unable to fetch data from SalesInq server')
        else:
            result = dict(
                    re.findall(r'(\d{6}) - (.*)', web_data.text)
                    )
    print('found %d companies' % len(result))
    return result

class FISenum(str, Enum):
    pass

class F11(FISenum):
    "Sales Category codes"
    code = 'An$(5,2)'
    desc = 'Cn$'
    shelf_life = 'FN'

class F27(FISenum):
    "Carrier (Ship Via) Master File (key starts with SV)"
    company_id = 'An$(3,2)'
    code = 'An$(5,2)'
    name = 'Bn$'
    addr1 = 'Cn$'
    addr2 = 'Dn$'
    addr3 = 'En$'
    tele = 'Fn$'
    fuel_surcharge = 'Gn$'

class F33(FISenum):
    """
    CSMS - CUSTOMER MASTER FILE - BASIC RECORD
    """
    company_id            = 'An$(1,2)'       # COMPANY CODE
    code                  = 'An$(3,6)'       # CUSTOMER NO.
    name                  = 'Bn$'            # NAME
    addr1                 = 'Cn$'            # ADDR LINE 1
    addr2                 = 'Dn$'            # ADDR LINE 2
    addr3                 = 'En$'            # ADDR LINE 3
    postal                = 'Ln$'            # ZIP CODE
    contract_prices       = 'Fn$(1,1)'       # Contract Prices?
    price_list_id         = 'Fn$(2,1)'       # Price List Code
    catalog_category      = 'Fn$(8,1)'       # Catalog Category
    this_year_sales       = 'Ln'             # M-T-D SALES
    last_year_sales       = 'Pn'             # Prev Year Sales
    broker_id             = 'Gn$(1,3)'       # Broker Code
    salesrep              = 'Gn$(4,3)'       # Salesrep Code
    tele                  = 'Gn$(20,10)'     # Telephone Number
    cust_type_id          = 'Hn$(1,2)'       # Customer Type Code
    sales_class_id        = 'Hn$(3,4)'       # Sales Class Code
    pricing_method        = 'Hn$(7,2)'       # Pricing Method
    alpha_sort_key        = 'In$'            # Alpha Sort Key
    contact               = 'Kn$(31,30)'     # Accntg Comments

class F47(FISenum):
    "CNVZZ - CBS SALESMAN MASTER FILE"
    key_type                  = 'An$(1,1)'      # KEY TYPE = 'Z'
    salesperson_id            = 'An$(2,3)'      # SALESPERSON CODE
    salesperson_name          = 'Bn$'           # SALESPERSON NAME
    company_id                = 'Fn$(1,2)'      # COMPANY CODE
    phone_no                  = 'Fn$(3,10)'     # PHONE NUMBER
    salesinq_access           = 'Hn$'           # SalesInq Access

class F65(FISenum):
    "Vendor Master"
    company_id =    'An$(1,2)'
    code =          'An$(3,6)'
    name =          'Bn$'
    addr1 =         'Cn$'
    addr2 =         'Dn$'
    addr3 =         'En$'
    tele =          'Gn$(1,15)'
    fax =           'Gn$(16,15)'
    contact =       'Nn$'

class F74(FISenum):
    "EMP1 - P/R EMPLOYEE MASTER BASIC RECORD MAINT/INQUIRY"
    company_id        = 'An$(1,2)'       # COMPANY CODE
    emp_num           = 'An$(3,5)'       # EMPLOYEE NO.
    name              = 'Bn$'            # EMPLOYEE NAME
    addr1             = 'Cn$'            # ADDRESS 1
    addr2             = 'Dn$'            # ADDRESS 2
    addr3             = 'En$'            # ADDRESS 3
    ssn               = 'Fn$'            # SOC.SEC.NO.
    tele              = 'Gn$'            # TELEPHONE NO.
    date_hired        = 'In$(1,6)'       # DATE HIRED
    date_terminated   = 'In$(7,6)'       # DATE TERMINATED
    birth_date        = 'In$(19,6)'      # BIRTHDATE
    last_raise        = 'In$(43,6)'      # Last Raise
    home_dept         = 'Jn$(1,2)'       # HOME DEPARTMENT
    status_flag       = 'Kn$(1,1)'       # STATUS FLAG
    pay_type          = 'Kn$(2,1)'       # PAY TYPE
    marital_status    = 'Kn$(4,1)'       # MARITAL STATUS
    pension_status    = 'Kn$(8,1)'       # PENSION STATUS
    gender            = 'Kn$(21,1)'      # GENDER
    driver_license    = 'Kn$(26,10)'     # Driver's Lic #
    emergency_contact = 'Kn$(36,18)'     # Emerg Contact
    emergency_phone   = 'Kn$(54,10)'     # Emerg Phone
    exempt_fed        = 'X(0)'           # # EXEMPT-FED
    exempt_state      = 'X(1)'           # # EXEMPT-STATE
    hourly_rate       = 'R(0)'           # HOURLY RATE

class F97(FISenum):
    "Inventory Availablility Code"
    code = 'An$(5,1)'
    desc = 'Bn$'

class F116(FISenum):
    'Inventory Category Code'
    code = 'An$(4,1)'
    desc = 'Bn$'

class F135(FISenum):
    """
    NVTY - INVENTORY MASTER FILE MAINTENANCE & INQU
    """
    company_id              = 'An$(1,2)'       #   0: Company Code
    item_id                 = 'An$(3,8)'       #   1: Item Code
    available               = 'Bn$(1,1)'       #   5: Available (Y/N/D/H)
    product_category        = 'Bn$(4,1)'       #   8: Product Category
    name                    = 'Cn$'            #  32: Description
    latin_name              = 'Dn$(33,40)'     #  38: Latin Name
    on_hand                 = 'I(6)'           #  55: Quantity on hand
    committed               = 'I(7)'           #  56: Quantity Committed
    on_order                = 'I(8)'           #  57: Quantity on order

class F140(str, Enum):
    """
    CSMSB - CUSTOMER MASTER FILE - DEFAULT SHIP-TO
    """
    company_id            = 'An$(1,2)'       #   0: COMPANY
    code                  = 'An$(3,6)'       #   1: Customer Code
    ship_to               = 'An$(9,1)'       #   2: ship-to indicator -> ' ' = False, '1' = True
    ship_to_sequence      = 'An$(10,2)'      #   3: default or sequence -> '  ' = default; '01', etc,
    name                  = 'Bn$'            #   4: SHIP TO NAME
    addr1                 = 'Cn$'            #   5: ADDRESS LINE 1
    addr2                 = 'Dn$'            #   6: ADDRESS LINE 2
    addr3                 = 'En$'            #   7: ADDRESS LINE 3
    postal                = 'Ln$'            #   8: ZIP CODE
    tele                  = 'Qn$(1,15)'      #  52: Phone Number
    comments              = 'Gn$'            #  55: Comments

class F163(FISenum):
    """
    POSM - SUPPLIER MASTER FILE
    """
    company_id        = 'An$(1,2)'       #   0: COMPANY CODE
    supplier_no       = 'An$(3,6)'       #   1: SUPPLIER NUMBER
    supplier_name     = 'Bn$'            #   2: SUPPLIER NAME
    addr1             = 'Cn$'            #   3: ADDRESS 1
    addr2             = 'Dn$'            #   4: ADDRESS 2
    addr3             = 'En$'            #   5: ADDRESS 3
    telephone_no      = 'Gn$(1,15)'      #   7: Telephone Number
    fax_no            = 'Gn$(16,15)'     #   8: FAX Number
    vendor_no         = 'In$(10,6)'      #  23: VENDOR NUMBER

class F250(FISenum):
    """
    NVBA - INVENTORY LOT CONTROL FILE MAINTENANCE &
    """
    #
    _init_ = "value sequence"
    _order_ = lambda m: m.sequence
    #
    company_id               = 'An$(1,2)',     0     # Company Code
    item_id                  = 'An$(3,8)',     1     # Item Code
                                                     # (open) An$(11,4)
    wrhse_id                 = 'An$(15,4)',    3     # Warehouse Code
    lot_no                   = 'An$(19,8)',    4     # Lot Number
    prod_receipt_date        = 'Bn$(1,6)',     5     # Production/Receipt Date
    hold_date                = 'Bn$(7,6)',     6     # Hold Date
                                                     # (open) Bn$(13,6)
    tag_type_id              = 'Cn$(1,2)',     8     # Tag Type Code
    random_weights           = 'Cn$(3,1)',     9     # Random Weights (Y,sp=no)
    pack_type                = 'Cn$(4,2)',    10     # Pack Type
    status_code              = 'Cn$(6,1)',    11     # Status Code (sp/H/C)
    hold_reason_id           = 'Cn$(7,2)',    12     # Hold Reason Code
    location                 = 'Cn$(9,2)',    13     # Location
    comments_part_1          = 'Cn$(11,20)',  14     # Comments Part 1
    reference_no             = 'Cn$(31,8)',   15     # Reference Number
    bin_no                   = 'Cn$(39,6)',   16     # Bin Number
    publ_whse_lot_no         = 'Cn$(44,15)',  17     # Publ Whse Lot No
    comments_part_2          = 'Cn$(59,30)',  18     # Comments Part 2
    qty_on_hand              = 'Q(0)',        19     # Quantity on Hand
    qty_committed            = 'Q(1)',        20     # Quantity Committed
    qty_on_order             = 'Q(2)',        21     # Quantity on Order
    standard_lot_cst         = 'Q(3)',        22     # Standard Lot Cost
    qty_produced             = 'Q(4)',        23     # Quantity Produced
    qty_on_hold              = 'Q(5)',        24     # Quantity on Hold
    standard_pack_in_lbs     = 'Q(6)',        25     # Standard Pack in Lbs
    piece_count              = 'Q(7)',        26     # Piece Count
    total_net_weight_on_hand = 'Q(8)',        27     # Total Net Weight on Hand
    beg_bal                  = 'Q(9)',        28     # Beg Bal (temp)
    net_movement             = 'Q(10)',       29     # Net movement(temp)

class F341(FISenum):
    "Production Line Master"
    company_id =    'An$(2,2)'
    code =          'An$(4,2)'
    desc =          'Bn$'
    short_desc =    'Cn$'

Main()

