#!/usr/local/bin/suid-python --virtualenv
"""
Ensure data integrity by removing duplicates, linking records, and adjusting
ir.model.data names
"""

# imports

from __future__ import print_function
from scription import *
from scription import split_text
from aenum import NamedTuple
from antipathy import Path
from ast import literal_eval
from openerplib import get_connection, MissingTable, Many2One, XidRec, CSV
from os import environ

import re
import sys

try:
    import __builtin__ as builtins
except ImportError:
    pass

# globals

virtual_env = environ['VIRTUAL_ENV']
config = '%s/config/fnx.ini' % virtual_env

ALL = [(1,'=',1)]


# API
@Script(
        )
def main():
    global oe, cfg, fis_tables, imd, imf#, admin_user#, fis_user
    cfg = OrmFile(config, types={'_path':Path})
    oe = get_connection(
            hostname=cfg.openerp.host,
            database=cfg.openerp.db,
            login=cfg.openerp.user,
            password=cfg.openerp.pw,
            )
    imd = oe.get_model('ir.model.data')
    imf = oe.get_model('ir.model.fields')
    # admin_user = 1
    # fis_user = (imd.read(
    #         [('model','=','res.users'),('name','=','user_fis_daemon')],
    #         fields=['res_id'])
    #         [0]['res_id']
    #         )
    fis_tables = {}

def _module_name(text):
    module, name = text.split('.')
    return module, name

def table(name):
    if name.isdigit():
        name = int(name)
    try:
        return fis_tables[name.lower()]
    except KeyError:
        abort('unable to find %r' % (name, ))

@Command(
        table=Spec('table to process names for', type=table),
        )
def fix_imd(table):
    "ensure eligible records have correct link in ir.model.data"
    # instanciate the table, retrieve all existing ir.model.data records, then
    # get any records that should have an imd link but don't
    table = table(oe, cfg)
    updated, skipped = table.update_imd()
    print('%d records added to ir.model.data' % updated)
    print('%d duplicates' % skipped)
    if script_command_name != 'add_imd':
        return table
    else:
        return skipped


@Command(
        )
@Alias(
        '192'
        )
def cnvzo1():
    "ensure all transmitter numbers have an ir.model.data entry; update user logins"
    cnvzo1 = add_imd(table('CNVZO1'))
    #
    # imd.get_object_reference('portal','group_portal')
    # ['res.groups', 229]
    #
    portal_group_id = imd.get_object_reference('portal','group_portal')[1]
    res_users = oe.get_model('res.users')
    fis_transmitter_code = oe.get_model('fis.transmitter_code')
    users = get_main_records(
            res_users,
            domain=[('groups_id','=',portal_group_id)],
            fields=['id','login','name','fis_partner_id','fis_transmitter_id'],
            )
    for user in users:
        print('user: ', user)
        if heb(user.login):
            transmitter_no = '150' + heb.data
            print('  HEB: ', transmitter_no)
        elif other(user.name):
            transmitter_no = other.data
            print('  other: ', transmitter_no)
        else:
            error("unable to extract transmitter from", user.login)
            transmitter_no = None
            continue
        transmitter_m2o = user.fis_transmitter_id
        if transmitter_m2o:
            transmitter = fis_transmitter_code.read(transmitter_m2o.id)
            if transmitter_no == transmitter.transmitter_no:
                # nothing needed
                continue
        # fis_transmitter_id=Many2One(
        #           id=66168,
        #           name='Staff of Life - Bakery',
        #           model='fis.transmitter_code',
        #           ),
        # let OpenERP do the work for us
        transmitters = cnvzo1.model.read([('transmitter_no','=',transmitter_no)])
        if len(transmitters) != 1:
            error('too many/too few transmitters for %r:  %s' % (transmitter_no, transmitters))
            continue
        transmitter ,= transmitters
        print('transmitter:', transmitter)
        values = res_users.onchange_fis_transmitter([user.id], transmitter.id, False, False)['value']
        values['fis_transmitter_id'] = transmitter.id
        print('saving %s' % values)
        res_users.write(user.id, values)


@Command(
        table=Spec('Which table to update', ),
        selection=Spec('an OpenERP domain to determine record selection', ),
        dupe=Spec('fields to consider for duplicates', MULTIREQ),
        prefer=Spec('which non-empty fields have priority in picking winning record', MULTI),
        use_empty=Spec('consider empty fields as duplicates?', FLAG),
        ignore_case=Spec('do not consider upper/lower-case as distinct', FLAG),
        dry_run=Spec('Do not affect changes, merely report what they would be', FLAG),
        )
def dedupe(table, selection, dupe, prefer, use_empty, ignore_case, dry_run):
    """
    Remove duplicate records according to criteria.

    Updates records pointing to the to-be-deleted one to point instead to the
    one that will be kept.

    Some tables are actually a mid-point of a logical record -- for example, res.partner can
    be both a logical record on its own, or an integral port of a res.users record.  Such
    integral records will be excluded from the dedupe process.
    """
    global OERec, OERel, DRY_RUN
    try:
        main_model = oe.get_model(table)
    except MissingTable:
        abort("table '%s' does not exist" % table)
    inheriting_fields = [v for k,v in main_model._inherits]
    domain = literal_eval(selection)
    DRY_RUN = dry_run
    OERec = NamedTuple(
            'OERec',
            list(dupe) + list(prefer) + inheriting_fields + [
                'model', 'id', 'create_uid', 'create_date', 'write_uid', 'write_date',
                'xmlid', 'tertiary',
                ])
    OERel = NamedTuple('OERel', ['model', 'field'])
    upstream, downstream, inherited = get_relations(table)
    records = get_main_records(main_model, domain, dupe, prefer+tuple(inheriting_fields), use_empty)
    valid_records = []
    dupes = {}
    mixed = {}
    def key(record):
        keys = []
        for value in rec[:len(dupe)]:
            if isinstance(value, str):
                keys.append(value.upper())
            else:
                keys.append(value)
        return tuple(keys)
    if use_empty:
        valid_records = records
    else:
        valid = lambda rec: all(f for f in rec[:len(dupe)])
        for rec in ViewProgress(records, "validating $total records"):
            if valid(rec):
                valid_records.append(rec)
    records = enhance_and_filter(valid_records, upstream, inherited, dupe+prefer)
    for rec in ViewProgress(records, 'sorting $total records'):
        mixed.setdefault(key(rec), []).append(rec)
    total = 0
    for key, records in ViewProgress(mixed.items(), 'checking $total keys'):
        if len(records) > 1:
            dupes[key] = records
            total += len(records)
    errors = None
    for key, records in ViewProgress(dupes.items(), "removing duplicates from $total sets / %d records" % total):
        primary, secondary = pick_one(records, prefer)
        errors = merge(main_model, dupe, primary, secondary)
    if errors:
        errors.insert(0, None)
        errors.insert(0, ('Duplicate Record','Exception','Relation','IDs'))
        echo(errors, border='table')

@Command(
        table=Spec('Which table to update', ),
        selection=Spec('an OpenERP domain to determine record selection', ),
        dry_run=Spec('Do not affect changes, merely report what they would be', FLAG),
        )
def fix_fis_id(table, selection, dry_run):
    """
    update empty xml_id with xml_id found in name field
    """
    try:
        main_model = oe.get_model(table)
    except MissingTable:
        abort("table '%s' does not exist" % table)
    name_field = main_model._rec_name
    domain = literal_eval(selection) + [('xml_id','=',False)]
    print(name_field, domain, verbose=2)
    fields = [l[0] for l in domain if (isinstance(l, tuple) and not isinstance(l[0], int))]
    if name_field not in fields:
        fields.append(name_field)
    print(fields, verbose=2)
    count = 0
    for rec in ViewProgress(main_model.read(domain, fields=fields)):
        count += 1
        print(rec[name_field], verbose=3)
        if rec[name_field] and fis_id(rec[name_field]):
            values = {}
            values['xml_id'] = xml_id = fis_id()
            name = rec[name_field].replace(xml_id,'').strip('- /')
            values[name_field] = name or xml_id
            if dry_run:
                echo('%r: %r' % (rec[name_field], values))
            else:
                main_model.write(rec.id, values, context={'fis_maintenance':True})
    echo('%d records examined' % count)

@Command(
        table=Spec('Which table to update', ),
        selection=Spec('an OpenERP domain to determine record selection', ),
        dry_run=Spec('Do not affect changes, merely report what they would be', FLAG),
        )
def fix_name(table, selection, dry_run):
    """
    update empty name fields with xml_id
    """
    global script_verbosity
    try:
        main_model = oe.get_model(table)
    except MissingTable:
        abort("table '%s' does not exist" % table)
    if dry_run:
        script_verbosity = 2
    name_field = main_model._rec_name
    domain = literal_eval(selection) + [(name_field,'=','')]
    fields = [l[0] for l in domain if (isinstance(l, tuple) and not isinstance(l[0], int))]
    if name_field not in fields:
        fields.append(name_field)
    if 'xml_id' not in fields:
        fields.append('xml_id')
    for rec in ViewProgress(main_model.read(domain, fields=fields), 'checking $total records'):
        if not rec.xml_id:
            continue
        if dry_run:
            echo(rec)
        else:
            main_model.write(rec.id, {name_field: rec.xml_id}, context={'fis_maintenance':True})


@Command(
        table=Spec('Which table to update', ),
        selection=Spec('an OpenERP domain to determine record selection', ),
        fields=Spec('other fields to display', MULTIREQ, force_default=()),
        )
def map_record(table, selection, fields):
    global OERec, OERel, script_verbosity
    try:
        main_model = oe.get_model(table)
    except MissingTable:
        abort("table '%s' does not exist" % table)
    domain = literal_eval(selection)
    fields = [l[0] for l in domain if (isinstance(l, tuple) and not isinstance(l[0], int) and l[0] != 'id')] + list(fields)
    inheriting_fields = [v for k,v in main_model._inherits]
    OERec = NamedTuple(
            'OERec',
            fields + inheriting_fields + [
                'model', 'id', 'create_uid', 'create_date', 'write_uid', 'write_date',
                'xmlid', 'tertiary',
                ])
    OERel = NamedTuple('OERel', ['model', 'field'])
    upstream, downstream, inherited = get_relations(table)
    records = get_main_records(main_model, domain, fields, inheriting_fields, use_blanks=True)
    script_verbosity = script_verbosity or 2
    records = enhance_and_filter(records, upstream, inherited, fields)


@Command(
        )
def fix_csms_links():
    """
    ensure all ship-to and contact records link to a customer
    """
    global script_verbosity
    res_partner = oe.get_model('res.partner')
    ship_tos = []
    contacts = []
    main = {}
    ship_to_count = 0
    contact_count = 0
    for rec in ViewProgress(
            res_partner.read(
                [('module','ilike','csms')],
                fields=['module','xml_id','name','parent_id','ship_to_parent_id'],
                ),
            "processing $total records",
        ):
        if rec.module.lower() == 'csms' and rec.xml_id.startswith('cntct_'):
            contacts.append(rec)
        elif rec.module.lower() == 'csms':
            main[rec.xml_id] = rec
        elif rec.module.lower() == 'csmsbs':
            ship_tos.append(rec)
        else:
            abort('unknown module %r' % rec.module)
    for rec in ViewProgress(ship_tos, "processing $total ship-tos"):
        if not rec.ship_to_parent_id:
            parent_xml_id = rec.xml_id.split('_')[1].split('-')[0]
            parent_id = main[parent_xml_id].id
            res_partner.write(rec.id, {'ship_to_parent_id': parent_id})
            ship_to_count += 1
    echo("%d ship-tos updated" % ship_to_count)
    for rec in ViewProgress(contacts, "processing $total contacts"):
        if not rec.parent_id:
            parent_xml_id = rec.xml_id.split('_')[1]
            parent_id = main[parent_xml_id].id
            res_partner.write(rec.id, {'parent_id': parent_id})
            contact_count += 1
    echo("%d contacts updated" % contact_count)


@Command(
        )
def export_csms():
    """
    export all csms and csmsbs records to csms.csv
    """
    res_partner = oe.get_model('res.partner')
    created = 0
    changed = 0
    partner_fields = get_fields(res_partner)
    partner_fields.pop(partner_fields.index('xml_id'))
    partner_fields.pop(partner_fields.index('module'))
    partner_fields = ['module','xml_id'] + partner_fields
    partners = res_partner.read([('module','ilike','CSMS')], fields=partner_fields)
    for i, partner in ViewProgress(
            enumerate(partners),
            "verifying $total partners for ir.model.data compliance",
            total=len(partners),
        ):
        imd_records = imd.search_read([
                ('model','=','res.partner'),
                ('res_id','=',partner.id)],
                )
        if not imd_records:
            # create one
            imd_data = {
                    'module': 'whc',
                    'model': 'res.partner',
                    'res_id': partner.id,
                    'name': '%s_%s_res_partner' % (partner.module, partner.xml_id),
                    }
            imd.create(imd_data)
            created += 1
        elif len(imd_records) == 1:
            # correct if necessary
            [imd_rec] = imd_records
            if imd_rec.module != 'whc':
                imd_data = {
                        'module': 'whc',
                        'name': '%s_%s_res_partner' % (partner.module, partner.xml_id),
                        }
                imd.write(imd_rec.id, imd_data)
                imd_data['model'] = imd_rec.model
                imd_data['res_id'] = imd_rec.res_id
                changed += 1
            else:
                imd_data = {
                        'module': imd_rec.module,
                        'model': imd_rec.model,
                        'res_id': imd_rec.res_id,
                        'name': imd_rec.name
                        }
        else:
            raise ValueError("record %r has ir.model.data records:\n%s" % '\n'.join(
                    ['%s.%s' % (r.module, r.name) for r in imd_records]
                    ))
        partners[i] = XidRec.fromdict(partner, imd=imd_data)
    #
    for partner in ViewProgress(
            partners,
            "verifying links for ir.model.data compliance",
        ):
        for m2o_field in res_partner._x2one_fields:
            if m2o_field in ('create_uid', 'write_uid'):
                continue
            if partner[m2o_field]:
                link = partner[m2o_field]
                imd_records = imd.search_read([
                        ('model','=',link.model),
                        ('res_id','=',link.id)],
                        )
                if m2o_field in ('parent_id', 'ship_to_parent_id'):
                    if len(imd_records) != 1:
                        raise ValueError("Partner %r field %r has invalid ir.model.records: %r"
                                % (partner.xml_id, m2o_field, imd_records))
                    partner[m2o_field] = imd_records[0].name
    with CSV('csms.csv', 'w') as csv:
        csv.header = partner_fields
        for partner in ViewProgress(
                partners,
                "writing data to csms.csv",
            ):
            csv.append([partner[f] for f in partner_fields])
    print('%d records created' % created)
    print('%d records updated' % changed)
    print('%d records saved to csv' % len(partners))


@Command(
        )
def import_csms():
    """
    import all csms and csmsbs records to csms.csv
    """
    res_partner = oe.get_model('res.partner')
    created = 0
    changed = 0
    csv = CSV('csms.csv')
    partner_fields = get_fields(res_partner)
    if set(csv.header) != set(partner_fields):
        abort('different fields: %r' % (set(csv.header) - set(partner_fields)))
    partner_fields.pop(partner_fields.index('xml_id'))
    partner_fields.pop(partner_fields.index('module'))
    partner_fields = ['module','xml_id'] + partner_fields
    partners = res_partner.read([('module','ilike','CSMS')], fields=partner_fields)
    for i, partner in ViewProgress(
            enumerate(partners),
            "verifying $total partners for ir.model.data compliance",
            total=len(partners),
        ):
        imd_records = imd.search_read([
                ('model','=','res.partner'),
                ('res_id','=',partner.id)],
                )
        if not imd_records:
            # create one
            imd_data = {
                    'module': 'whc',
                    'model': 'res.partner',
                    'res_id': partner.id,
                    'name': '%s_%s_res_partner' % (partner.module, partner.xml_id),
                    }
            imd.create(imd_data)
            created += 1
        elif len(imd_records) == 1:
            # correct if necessary
            [imd_rec] = imd_records
            if imd_rec.module != 'whc':
                imd_data = {
                        'module': 'whc',
                        'name': '%s_%s_res_partner' % (partner.module, partner.xml_id),
                        }
                imd.write(imd_rec.id, imd_data)
                imd_data['model'] = imd_rec.model
                imd_data['res_id'] = imd_rec.res_id
                changed += 1
            else:
                imd_data = {
                        'module': imd_rec.module,
                        'model': imd_rec.model,
                        'res_id': imd_rec.res_id,
                        'name': imd_rec.name
                        }
        else:
            raise ValueError("record %r has ir.model.data records:\n%s" % '\n'.join(
                    ['%s.%s' % (r.module, r.name) for r in imd_records]
                    ))
        partners[i] = XidRec.fromdict(partner, imd=imd_data)
    print("ir.model.data records:  created - %d  | updated - %d" % (created, changed))
    #
    for partner in ViewProgress(
            partners,
            "verifying links for ir.model.data compliance",
        ):
        for m2o_field in res_partner._x2one_fields:
            if m2o_field in ('create_uid', 'write_uid'):
                continue
            if partner[m2o_field]:
                link = partner[m2o_field]
                imd_records = imd.search_read([
                        ('model','=',link.model),
                        ('res_id','=',link.id)],
                        )
                if m2o_field in ('parent_id', 'ship_to_parent_id'):
                    if len(imd_records) != 1:
                        raise ValueError("Partner %r field %r has invalid ir.model.records: %r"
                                % (partner.xml_id, m2o_field, imd_records))
                    partner[m2o_field] = imd_records[0].name
    # existing records are in good shape, compare with csv records for changes
    # partner_map = dict(
    #         (r.xml_id, r)
    #         for r in partners
    #         )
    partner_map = {}
    different = 0
    for p in partners:
        if p.xml_id in partner_map:
            error()
            error(p)
            error(partner_map[p.xml_id])
        else:
            partner_map[p.xml_id] = p

    if len(partner_map) != len(partners):
        abort('partners has %d duplicates' % (len(partners)-len(partner_map)))
    partner_missing = {}
    partner_diffs = {}
    partner_table = []
    diff_table = []
    field_diffs = set()
    missing = added = 0
    different = updated = 0
    try:
        for csv_rec in csv.iter_map():
            partner = partner_map.get(csv_rec.xml_id)
            if partner is None:
                # need to add partner
                partner_missing[csv_rec.xml_id] = csv_rec
                missing += 1
                continue
            diffs = {}
            for f in partner_fields:
                if f == 'id':
                    continue
                old = csv_rec[f]
                new = partner[f]
                if isinstance(old, str) or isinstance(new, str):
                    old = old and old.lower()
                    new = new and new.lower()
                if old != new:
                    field_diffs.add(f)
                    diffs[f] = old, new
            if diffs:
                partner_diffs[partner.xml_id] = diffs
                different += 1
        if partner_missing:
            partner_table = [('xml_id','name'), None]
            for partner in partner_missing.values():
                del partner.id
                partner.parent_id = partner.parent_id and get_id_from_name('CSMS', partner.parent_id, 'res.partner')
                partner.ship_to_parent_id = partner.ship_to_parent_id and get_id_from_name('CSMS', partner.ship_to_parent_id, 'res.partner')
                partner_table.append((partner.xml_id, partner.name))
                res_partner.create(partner)
                added += 1
        if partner_diffs:
            field_diffs = list(field_diffs)
            diff_table = [['partner'] + field_diffs, None]
            for xml_id, diffs in partner_diffs.items():
                row = [xml_id]
                partner = partner_map[xml_id]
                original_values = {}
                for f in field_diffs:
                    diff = diffs.get(f, None)
                    if diff is None:
                        row.append('')
                    else:
                        row.append('%r\n%r' % diff)
                diff_table.append(row)
                # create values for oe
                values = dict(
                        (k, v[0])
                        for k, v in diffs.items()
                        )
                if 'parent_id' in diffs:
                    diffs['parent_id'] = get_id_from_name('CSMS', diffs['parent_id'], 'res.partner')
                if 'ship_to_parent_id' in diffs:
                    diffs['ship_to_parent_id'] = get_id_from_name('CSMS', diffs['ship_to_parent_id'], 'res.partner')
                res_partner.write(partner.id, values)
                updated += 1
    finally:
        if partner_table:
            echo(partner_table, border='table')
        if diff_table:
            echo(diff_table, border='table')
        echo('%d/%d records added' % (added, missing))
        echo('%d/%d records updated' % (updated, different))


@Command(
        table=Spec('table to use', ),
        field=Spec('field(s) to update', ),
        )
def update_calc(table, field):
    """
    read and rewrite values for fields causing dependent calced fields to update
    """
    model = oe.get_model(table)
    records = model.read([(1,'=',1)], fields=[field])
    for rec in ViewProgress(records):
        model.write(rec.id, {field: rec[field]})
    echo('%d source records processed' % len(records))


# helpers

heb = Var(lambda s: check_code('HE(\d\d\d)', s))
other = Var(lambda s: check_code('(\d\d\d\d\d\d) ', s))
fis_id = Var(lambda s: check_code('(\w{3}\d{5,})', s))

def enhance_and_filter(records, upstream, inherited, fields):
    kept_records = []
    relations = set()
    for rec in ViewProgress(records, 'filtering $total records'):
        for action, relation in (('discard', inherited), ('keep', upstream)):
            for rel in relation:
                try:
                    u_table = oe.get_model(rel.model)
                except MissingTable:
                    continue
                if not u_table._auto:
                    # abstract table
                    continue
                if rel.field not in u_table._all_columns or rel.field in u_table._x2many_fields or not is_searchable(rel.model, rel.field):
                    continue
                try:
                    u_records = u_table.read([(rel.field,'=',rec.id)], fields=[rel.field])
                except Exception:
                    continue
                if not u_records:
                    continue
                u_ids = [t.id for t in u_records] 
                if u_ids:
                    if action == 'discard':
                        break
                    rec.tertiary[rel] = u_ids
                    relations.add(rel)
            else:
                # no break encountered, try next relation
                continue
            # we hit a break, so break again
            break
        else:
            # get through all the discards without a match, keep the record
            kept_records.append(rec)
    if script_verbosity > 1:
        relations = list(relations)
        header = [kept_records[0].model] + list(fields) # + list(kept_records[0][:-8])
        for r in relations:
            models = [p.strip() for p in r.model.split('.')] + [r.field]
            header.append('.\n'.join(models))
        rows = [header, None]
        for rec in kept_records:
            row = ['%s\n%s' % (rec.id, rec.xmlid)]
            # print('ROW', row)
            # print('TERTIARY', rec.tertiary.keys())
            for f in fields:
                v = getattr(rec, f)
                if isinstance(v, Many2One):
                    v = '/\n'.join(t.strip() for t in str(v).split('/'))
                row.append(v)
            for rel in relations:
                row.append(
                        '\n'.join(
                            split_text(
                                ', '.join(str(id) for id in rec.tertiary.get(rel, [])),
                                30,
                                )))
            rows.append(row)
            rows.append(None)
        echo(rows, border='table')
    return kept_records

def check_code(pattern, string):
    res = re.match(pattern, string)
    return res and res.groups()[0]

def get_fields(model):
    """
    return non-image and non-x2m fields
    """
    result = (
            set(model._all_columns)
            - model._binary_fields
            - model._x2many_fields
            - model._html_fields
            - set(['contact_address', 'create_uid', 'create_date', 'write_uid', 'write_date'])
            )
    for name in model._binary_fields:
        if 'image' not in name:
            result.add(name)
    return list(result)

def get_main_records(model, domain, fields, extra=[], use_blanks=False):
    if not use_blanks:
        for f in fields:
            if f in model._text_fields or f in model._html_fields:
                domain.append((f,'!=',''))
            else:
                domain.append((f,'!=',False))
    records = model.read(domain, fields=fields+extra)
    # add the metadata
    meta = dict(
            (r['id'], r)
            for r in model.meta_read([rec.id for rec in records], details=True)
            )
    for i, rec in enumerate(records):
        rec.update(meta[rec.id])
        records[i] = OERec(model=model.model_name, tertiary={}, **rec)
    return records

def get_id_from_name(fis_module, name, table):
    imd_name = ('%s_%s_%s' % (fis_module, name, table)).replace('.','_')
    found = imd.read([('name','=ilike',name)], fields=['module','model','res_id'])
    if len(found) > 1:
        abort('too many records found for %r:\n%s' % (name, '\n'.join('%s %s:%s' % (f.module, f.model, f.res_id) for f in found)))
    elif not found:
        abort('no record found for %r' % name)
    else:
        return found[0].res_id

def get_relations(table):
    """
    get tables that link to TABLE and that TABLE links to via _id fields

    upstream  -->      table    --> downstream
    inherits  --^
    ( res.user      res.partner                )
    ( sample.memo                  res.country )

    `downstream` are tables pointed to by `table`'s fields
    `upstream` are tables that point to `table`
    `inheriting` are any `upstream` tables that form a logical record with `table`, and
                 should not be updated to point to winning record
    """
    ir_model_fields = oe.get_model('ir.model.fields')
    oe.get_model(table)
    upstream = [
            OERel(r.model, r.name)
            for r in ir_model_fields.read(
                [('relation','=',table)],
                fields=['model','name']
                )
            if r.model != 'product.available_at'
            ]
    downstream = [
            OERel(r.relation, r.name)
            for r in ir_model_fields.read(
                [('model','=',table),('relation','!=','')],
                fields=['relation','name']
                )
            if r.relation != 'product.available_at'
            ]
    # inheriting lists any tables in `upstream` that logically create a record with `table`
    # inheriting tables are removed from upstream
    inheriting = set()
    for rel in upstream:
        try:
            model = oe.get_model(rel.model)
        except MissingTable:
            continue
        except Exception:
            echo(rel)
            raise
        else:
            for table_name, field in model._inherits:
                if table_name == table:
                    inh_rel = OERel(rel.model, field)
                    if inh_rel in upstream:
                        inheriting.add(inh_rel)
    upstream = list(set(upstream) - inheriting)
    return upstream, downstream, inheriting

def is_searchable(table, field):
    desc = imf.read([('model','=',table),('name','=',field)], fields=['selectable'])
    return desc[0]['selectable']

def issubclass(target, allowed):
    if not isinstance(allowed, tuple):
        allowed = (allowed, )
    try:
        return builtins.issubclass(target, allowed)
    except TypeError:
        return False

def merge(main_model, selection, primary, duplicates):
    # make the tertiary ids from the duplicate records point to the primary record instead.
    # TODO: special case mail.message create entries: leave them on their original records
    # echo('merging with %s' % (primary, ), border='flag')
    errors = []
    for rec in duplicates:
        error = False
        for rel, ids in rec.tertiary.items():
            model = oe.get_model(rel.model)
            if DRY_RUN:
                echo('\n\n')
                echo("would assign %s to %s ids %s" % (primary.id, model.model_name, ', '.join([str(i) for i in ids])))
            else:
                try:
                    model.write(ids, {rel.field: primary.id}, context={'fis_maintenance':True})
                except Exception:
                    _, exc, _ = sys.exc_info()
                    errors.append((rec[:-8], str(exc).split('\n'), rel, ids))
                    error = True
        if DRY_RUN:
            echo("would delete %s" % (rec, ))
            echo('\n\n')
        elif not error:
            print("  deleting", rec, verbose=2)
            main_model.unlink(rec.id)
    return errors

def pick_one(records, prefer):
    # given a group of records picks the one:
    # - has an xmlid in the fis namespace
    # - created by fis
    # - created by admin
    # - created earliest
    if len(records) < 2:
        abort('only one record!!')
    def key(record):
        # { rel1: ids1, res2: ids2, ...}
        count = 0
        for ids in record.tertiary.values():
            count += len(ids)
        if record.xmlid and record.xmlid.startswith(('fis.','whc.')):
            is_fis = 1  # 1 means yes (sorts after 0)
        else:
            is_fis = 0  # 0 means no (sorts before 1)
        preferred = sum([1 for p in prefer if getattr(record, p, None)])
        return -is_fis, -preferred, -count, record.create_date
    records.sort(key=lambda r: key(r))
    primary = records.pop(0)
    return primary, records


Main()

