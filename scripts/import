#!/usr/bin/env python2.7

from difflib import SequenceMatcher
from enum import Enum
from itertools import groupby
from math import ceil
from scription import *
from VSS.address import Rise, Sift
from VSS.address import PostalCode, NameCase, BsnsCase, AddrCase, normalize_address_line, cszk
from VSS.address import us_ca_state_abbr, us_ca_state_name, ca_province_abbr, ca_province_name
from VSS.openerp import get_records
from VSS.time_machine import PropertyDict
from VSS.utils import dbf, Table, text_to_date, ProgressBar, IntEnum, contains_any, fix_phone, translator, var
import openerplib
import time

DateTime = dbf.DateTime

execfile('/etc/openerp/credentials')

def connect(host=HOST, database=DB, login=USER, password=PW):
    global OE
    OE = PropertyDict()
    OE.conn = openerplib.get_connection(hostname=host, database=database, login=login, password=password)
    return OE

def find_country(target):
    if not target:
        return False
    if target.lower() in ('us', 'usa', 'usoa'):
        target = 'United States'
    elif target.lower() == 'africa':
        target = 'South Africa'
    elif target.lower() == 'netherland':
        target = 'Netherlands'
    if target.lower() in OE.country:
        return OE.country[target.lower()].id
    matches = set()
    for name, rec in OE.country.items():
        if name.startswith(target):
            matches.add(rec)
        elif rec.code == target:
            matches.add(rec)
        elif target.lower() in name.lower():
            matches.add(rec)
    if len(matches) > 1:
        raise ValueError('Target: %r  Matches: %s' % (target, ', '.join([m.name for m in matches])))
    elif len(matches) == 1:
        return matches.pop().id
    else:
        return False

def find_partner(pool, target):
    pass

def find_state(state):
    if state in us_ca_state_abbr:
        state = us_ca_state_abbr[state]
    records = get_records(
            OE,
            'res.country.state',
            domain=[('name','=',NameCase(state))],
            fields=['id','name','code','country_id'],
            )
    if len(records) > 1:
        print 'state %s found as' % state
        for rec in records:
            print '   %s -> %s' % (rec.country_id.name, rec.name)
        return False, False
    if records:
        return records[0].id, records[0].country_id[0]
    return False, False


def fix_names(*names):
    result = []
    for name in names:
        result.append(name.upper())
    if len(names) == 1:
        return result[0]
    return result

def Float(value):
    try:
        return float(value)
    except ValueError:
        return False

def get_customer_contact(customer, name, address, city, state, postal, country, contact, phone):
    "return contact_id from OpenERP"
    current_contacts = OE.partner_data[customer.xml_id].child_ids
    values = PropertyDict()
    if contact:
        values.name = NameCase(contact)
    else:
        values.name = BsnsCase(name)
    address1, address2 = normalize_address_line(address)
    if country == 'USA':
        country = ''
    address3, city, state, postal, country = cszk('%s, %s' % (city, state), '%s  %s' % (postal, country))
    address1, address2, address3 = AddrCase(Rise(address1, address2, address3))
    if address3:
        address2 = address2 + ', ' + address3
    values.street, values.street2 = address1, address2
    state_id, country_id = False, False
    if state:
        state_id, country_id = find_state(state)
    if not country_id:
        country_id = find_country(country)
    values.city, values.state_id, values.zip, values.country_id = city, state_id, postal.code, country_id
    values.phone = fix_phone(phone)
    values.parent_id = customer.id
    contact_id = False
    if current_contacts:
        contacts = get_records(
                OE.partner,
                ids=current_contacts,
                fields='id name street street2 city state_id zip country_id phone'.split(),
                )
        for c in contacts:
            for f in 'name street street2 city state_id zip country_id phone'.split():
                failure = False
                cf = c[f]
                vf = values[f]
                if f[-3:] == '_id' and cf:
                    cf = cf[0]
                if cf and cf != vf:
                    break
            else:
                contact_id = c.id
            if contact_id:
                break
    if not contact_id:
        values.type = 'delivery'
        values.use_parent_address = False
        contact_id = OE.partner.create(dict(values))
        current_contacts.append(contact_id)
    return contact_id

def get_item_id(model, item_code):
    res = get_records(OE, 'product.product', fields=['id'], domain=[('xml_id','=',item_code)], max_qty=1)
    if not res:
        raise ValueError('Item %s not found' % item_code)
    return res[0].id

def get_item_desc(text):
    pieces = text.strip(' \t\'"\n').split()
    if not pieces:
        return '', ''
    if pieces[0][:3].isalpha() and pieces[0][3:].isdigit():
        return pieces[0], ' '.join(pieces[1:])
    ic = ''.join(pieces[:2])
    if ic[:3].isalpha() and ic[3:].isdigit():
        return ic, ' '.join(pieces[2:])
    return '', ' '.join(pieces)

def get_lot_id(lot_model, lots, lot_no, **values):
    """returns existing lot_id, or new lot_id if lot_no doesn't already exist
    
    kwds will added to any create call"""
    lot_no = fix_names(lot_no)
    if lot_no in lots:
        id = lots[lot_no].id
        lot_model.write(id, values)
        return id
    else:
        values['lot_no'] = lot_no
        return lot_model.create(values)

def measurement(user_measurement):
    "remove trailing 's', return first and last characters"
    um = user_measurement.lower().rstrip('s')
    if len(um) > 1:
        um = um[::(len(um)-1)]
    if um == 'pc':
        um = 'ea'
    elif um == 'mt':
        um = 'lb'
    elif um in ('lg', 'jg'):
        um = 'kg'
    return um

def regulatory(value):
    "allowed values: n/a, cleared, rejected"
    value = value.lower().replace('.','').replace(';','').replace(' ','')
    if value in ('n/a', 'n/', 'na/', '/na'):
        value = 'na'
    elif value in ('hold', ):
        value = 'held'
    elif value in ('clearecd', ):
        value = 'cleared'
    if value not in ('', 'na', 'cleared', 'held', 'rejected'):
        value = None
        #raise ValueError('unknown regulatory value: %r' % value)
    return (False, value)[bool(value)]

def sample_supplier(name, address, city, state, postal, country, phone, fax):
    "return supplier values ready for OpenERP"
    values = PropertyDict()
    values.name = BsnsCase(name)
    address1, address2 = normalize_address_line(address)
    if country == 'USA':
        country = ''
    address3, city, state, postal, country = cszk('%s, %s' % (city, state), '%s  %s' % (postal, country))
    address1, address2, address3 = AddrCase(Rise(address1, address2, address3))
    if address3:
        address2 = address2 + ', ' + address3
    values.street, values.street2 = address1, address2
    state_id, country_id = False, False
    if state:
        state_id, country_id = find_state(state)
    if not country_id:
        country_id = find_country(country)
    city = NameCase(city)
    values.city, values.state_id, values.zip, values.country_id = city, state_id, postal.code, country_id
    values.phone = fix_phone(phone)
    values.fax = fix_phone(fax)
    return values

def strip_field(text):
    text = text.strip(' \t\'"\n').upper()
    return text


@Command(
        )
def nuke():
    """
    destroys all data in lots, preship, and sample
    """
    OE = connect()
    lots_model = OE.conn.get_model('wholeherb_integration.product_lot')
    po_model = OE.conn.get_model('wholeherb_integration.purchase_order')
    print "getting lot records ...",
    ids = [r.id for r in get_records(lots_model, domain=[(1,'=',1)], fields=['id'])]
    print "removing %d records" % len(ids)
    lots_model.unlink(ids)
    print "getting purchase records ...",
    ids = [r.id for r in get_records(po_model, domain=[(1,'=',1)], fields=['id'])]
    print "removing %d records" % len(ids)
    po_model.unlink(ids)

    sample_model = OE.conn.get_model('wholeherb_integration.sample_memo')
    print "getting sample memo records",
    ids = [r.id for r in get_records(sample_model, domain=[(1,'=',1)], fields=['id'])]
    print "removing %d records" % len(ids)
    sample_model.unlink(ids)

    partner_model = OE.partner = OE.conn.get_model('res.partner')
    preship_sample_model = OE.conn.get_model('wholeherb_integration.preship_sample')
    print "getting preship sample records ...",
    ids = [r.id for r in get_records(preship_sample_model, domain=[(1,'=',1)], fields=['id'])]
    print "removing %d records" % len(ids)
    preship_sample_model.unlink(ids)
    print "geting preship supplier records ...",
    ids = [r.id for r in get_records(partner_model, domain=[('module','=','preship_supplier')], fields=['id'])]
    print "removing %d records" % len(ids)
    partner_model.unlink(ids)


@Command(
        file_name=('dbf file to import data fram', None, ),
        nuke=('clear table before import', FLAG, None, ),
        )
def purchasing_lots(file_name, nuke):
    """Imports Purchasing into product.lots and wholeherb_integration.product_lot

    example file name: Purchasing_Database_Table1.dbf
    """
    Field = IntEnum('Purchasing_Field', (
            'match_preship', 'risk_factor', 'pack', 'qty_recd', 'qty_recd_uom', 'lot', 'lot_ltr', 'proj_fob_cost',
            'proj_clearance', 'supplier_name', 'item_code', 'desc', 'act_cost', 'cost', 'on_order', 'on_order_uom',
            'act_fob_cost', 'qty_avail', 'status', 'etd_0son', 'terms', 'po_no', 'vessel', 'date', 'usda', 'fda',
            'customs', 'c_of_a', 'preship_lot', 'preship_status', 'c_of_o', 's_comment', 'pr_comment', 'i_f', 'cus',
            'misc', 'date_recd', 'supplier_no',
            ))
    as_is = (
            'risk_factor',  'on_order', 'status', 'etd_0son', 'terms', 'c_of_a', 's_comment', 'pr_comment',
            )
    floats = (
            'pack', 'cost', 'proj_clearance', 'act_fob_cost', 'act_cost', 'i_f', 'cus', 'misc',
            )
    if len(Field) != 38:
        abort('Field should have 29 members, but actually has %d members' % len(Field))
    if len(as_is) != 8:
        abort('as_is should have 23 members, but actually has %d members' % len(as_is))
    print 'connecting to OE...'
    OE = connect()
    lots_model = OE.conn.get_model('wholeherb_integration.product_lot')
    po_model = OE.conn.get_model('wholeherb_integration.purchase_order')
    product_model = OE.conn.get_model('product.product')
    if nuke:
        ids = [r.id for r in get_records(lots_model, domain=[(1,'=',1)], fields=['id'])]
        lots_model.unlink(ids)
        ids = [r.id for r in get_records(po_model, domain=[(1,'=',1)], fields=['id'])]
        po_model.unlink(ids)
    print 'getting Unit of Measure records...'
    oe_uom = PropertyDict((r.name, r) for r in get_records(OE, 'product.uom'))
    print 'getting Partner records (this will take a bit)...'
    oe_suppliers = PropertyDict(('%s-%s' % (r.module, r.xml_id), r) for r in get_records(
        OE,
        model='res.partner',
        domain=[('module','in',['posm','vnms'])],
        fields=['id','name','xml_id','module'],
        ))
    print 'getting Product records (this will take even longer)...'
    oe_products = PropertyDict((r.xml_id, r) for r in get_records(
        OE,
        model='product.product',
        fields=['id', 'xml_id', 'name'],
        ))
    print 'getting Country records...'
    OE.country = PropertyDict((r.name.lower(), r) for r in get_records(OE, 'res.country'))
    print 'getting purchases...'
    oe_purchases = dict((r.purchase_order, r) for r in get_records(OE, 'wholeherb_integration.purchase_order'))
    #for po_num, po in oe_purchases.items():
    #    print po.lot_ids
    #    po.lot_ids = [l.id for l in po.lot_ids]
    oe_purchases_by_id = dict((p.id, p) for p in oe_purchases.values())
    print 'getting lots...'
    oe_lots = PropertyDict((l.lot_no.lower(), l) for l in get_records(lots_model, domain=[('lot_no_valid','=',True)]))
    oe_lots_by_id = dict((l.id, l) for l in oe_lots.values())
    table = Table(file_name)
    with table:
        def index(rec):
            if isinstance(rec, dbf.Record) and dbf.recno(rec) == 0:
                return dbf.DoNotIndex
            po_no = strip_field(rec[Field.po_no])
            if not po_no:
                po_no = 0
            else:
                po_no = int(po_no)
            return po_no, rec[Field.item_code]
        order = table.create_index(index)
        print 'processing %s...' % file_name
        pb = ProgressBar(len(order))
        for po, products in groupby(dbf.Templates(order), index):
            lot_ids = set()
            for lot in products:
                pb.tick()
                for fld in Field:
                    lot[fld] = lot[fld].strip('"\'')
                values = PropertyDict()
                values.lot_no = ''.join(fix_names(lot[Field.lot], lot[Field.lot_ltr]))
                product = lot[Field.item_code].upper().replace(' ', '')
                if product not in oe_products:
                    product_id = product_model.create(dict(name=product + ' ' + lot[Field.desc]))
                else:
                    product_id = oe_products[product].id
                values.product_id = product_id
                values.match_preship = lot[Field.match_preship].lower() == 'yes'
                for field in floats:
                    values[field] = Float(lot[Field[field]])
                for field, offset in (
                        ('on_order_uom_id', Field.on_order_uom),
                        ('qty_recd_uom_id', Field.qty_recd_uom),
                        ):
                    uom = measurement(lot[offset])
                    if uom:
                        try:
                            values[field] = oe_uom[uom].id
                        except Exception, exc:
                            print 'Lot %s: %s' % (values.lot_no, exc.message)
                try:
                    values.qty_recd = int(ceil(float(lot[Field.qty_recd])))
                except ValueError:
                    values.qty_recd = False
                values.qty_remain = 0 or values.qty_recd
                for field, offset in (
                        ('expected_date', Field.date),
                        ('recd_date', Field.date_recd),
                        ):
                    try:
                        date = text_to_date(lot[offset], format='mdy') or False
                    except ValueError:
                        date = False
                    if date:
                        values[field] = unicode(date)
                qty_avail = lot[Field.qty_avail].lower()
                if qty_avail in ('all', 'some', 'none'):
                    values.qty_avail = qty_avail
                values.usda = regulatory(lot[Field.usda])
                values.fda = regulatory(lot[Field.fda])
                values.customs = regulatory(lot[Field.customs])
                if lot[Field.preship_lot] in oe_lots:
                    preship = oe_lots[lot[Field.preship_lot]]
                    values.preship_id = preship.id
                    if not preship.status and lot[Field.preship_status]:
                        lots_model.write([preship.id], {'status':lot[Field.preship_status]})
                cofo_id = find_country(lot[Field.c_of_o])
                if cofo_id:
                    values.cofo_ids = [(6, 0, [cofo_id])]
                for offset in as_is:
                    field = lot[Field[offset]]
                    if field:
                        values[offset] = field
                supplier = lot[Field.supplier_no].zfill(6)
                for module in ('posm', 'vnms'):
                    try:
                        supplier_id = values.supplier_id = oe_suppliers['%s-%s' % (module, supplier)].id
                        break
                    except LookupError:
                        pass
                else:
                    supplier_id = False
                if values.lot_no in oe_lots:
                    lot_id = oe_lots[values.lot_no].id
                    lots_model.write([lot_id], dict(values))
                else:
                    lot_id = lots_model.create(dict(values))
                values = get_records(OE, 'wholeherb_integration.product_lot', domain=[('id','=',lot_id)], max_qty=1)[0]
                lot_ids.add(lot_id)
                if values.lot_no_valid:
                    oe_lots[values.lot_no] = values
                    oe_lots_by_id[lot_id] = values
            po_number = int(lot[Field.po_no])
            vessel = lot[Field.vessel]
            # this will have to wait :(
            # supplier = 
            po_key = po_number
            values = PropertyDict(purchase_order=po_number, vessel=vessel, supplier_id=supplier_id)
            if po_key in oe_purchases:
                purchase_order = oe_purchases[po_key]
                po_id = purchase_order.id
                lot_ids |= set(purchase_order.lot_ids)
                values.lot_ids = [(6, 0, list(lot_ids))]
                po_model.write([po_id], dict(values))
            else:
                values.lot_ids = [(6, 0, list(lot_ids))]
                po_id = po_model.create(dict(values))
            values = get_records(OE, 'wholeherb_integration.purchase_order', domain=[('id','=',po_id)], max_qty=1)[0]
            oe_purchases[po_key] = values
            oe_purchases_by_id[po_id] = values


@Command(
        file_name=('dbf file to import data fram', None, ),
        nuke=('clear table before import', FLAG, None, ),
        )
def sample_memo_lots(file_name, nuke):
    """
    Import a file into wholeherb_integration.sample_memo

    example file name: Sample_memo_db_Sample_Samples_Requested.dbf
    """
    class Field(IntEnum):
        order_id = 0
        item_desc = 2
        lot_no = 3
    print 'connecting to OE...'
    OE = connect()
    OE.country = PropertyDict((r.name.lower(), r) for r in get_records(OE, 'res.country'))
    lot_model = OE.conn.get_model('wholeherb_integration.product_lot')
    print 'getting Product Lot records...'
    oe_lots = PropertyDict((r.lot_no, r) for r in get_records(lot_model, domain=[('lot_no_valid','=',True)]))
    sample_model = OE.conn.get_model('wholeherb_integration.sample_memo')
    if nuke:
        ids = [r.id for r in get_records(sample_model, domain=[(1,'=',1)], fields=['id'])]
        sample_model.unlink(ids)
    print 'getting Sample Memo Lot records...'
    oe_sample = PropertyDict((r.order_num, r) for r in get_records(sample_model))
    print 'getting Product records (this will take a bit)...'
    product_model = OE.conn.get_model('product.product')
    oe_products = PropertyDict()
    for item in get_records(
            OE,
            model='product.product',
            fields=['id', 'xml_id', 'name', 'default_code'],
            ):
        key = item.xml_id or item.default_code
        if not key:
            continue
        oe_products[key] = item
    table = Table(file_name)
    with table:
        def index(rec):
            if isinstance(rec, dbf.Record) and dbf.recno(rec) == 0:
                return dbf.DoNotIndex
            lot_no = rec[Field.lot_no]
            return rec[Field.order_id], lot_no
        order = table.create_index(index)
        print 'processing %s...' % file_name
        pb = ProgressBar(len(order))
        for order_num, lots in groupby(dbf.Templates(order), index):
            lot_ids = set()
            for rec in lots:
                pb.tick()
                for fld in Field:
                    rec[fld] = strip_field(rec[fld])
                lot_no = strip_field(rec[Field.lot_no])
                item_code, desc = get_item_desc(rec[Field.item_desc])
                # check for existing lot
                if lot_no in oe_lots:
                    lot_id = oe_lots[lot_no].id
                else:
                    if not item_code or item_code not in oe_products:
                        # no item code -- get it added
                        product_id = product_model.create(dict(name=item_code + ' ' + desc))
                    else:
                        product_id = oe_products[item_code].id
                    if lot_no:
                        lot_id = lot_model.create(dict(lot_no=lot_no, product_id=product_id))
                        lot_rec = get_records(lot_model, ids=lot_id, fields=['lot_no', 'product_id', 'lot_no_valid'])
                        if lot_rec.lot_no_valid:
                            oe_lots[lot_rec.lot_no] = lot_rec
                if lot_no:
                    lot_ids.add(lot_id)
            values = PropertyDict()
            values.order_num = order_num = rec[Field.order_id]
            if lot_ids:
                values.lot_ids = [(6, 0, list(lot_ids))]
            if order_num not in oe_sample:
                order_id = sample_model.create(dict(values))
                order_rec = get_records(sample_model, ids=order_id, fields=['id','lot_ids','order_num'])
                oe_sample[order_num] = order_rec
            else:
                order_rec = oe_sample[order_num]
                for id in order_rec.lot_ids:
                    lot_ids.add(id)
                values.lot_ids = [(6, 0, list(lot_ids))]
                sample_model.write([order_rec.id], dict(values))


@Command(
        file_name=('dbf file to import data fram', None, ),
        )
def sample_memo_orders(file_name):
    """
    Import a file into wholeherb_integration.sample_memo

    exmaple file name: Sample_memo_db_Sample_Memo.dbf
    """
    class Field(IntEnum):
        order_id = 0
        employee_name = 2
        order_date = 3
        customer_id = 5
        ship_name = 6
        ship_address = 7
        ship_city = 8
        ship_state = 9
        ship_zip = 10
        ship_country = 11
        ship_contact = 12
        ship_phone = 13
        ship_date = 14
        shipping_method = 16
        comments1 = 17
        comments2 = 18
        comments3 = 19
    print 'connecting to OE...'
    OE = connect()
    OE.country = PropertyDict((r.name.lower(), r) for r in get_records(OE, 'res.country'))
    print 'getting Sample Memo Lot records...'
    sample_model = OE.sample = OE.conn.get_model('wholeherb_integration.sample_memo')
    oe_sample = OE.sample_data = PropertyDict((r.order_num, r) for r in get_records(sample_model))
    print 'getting Shipping Methods...'
    shipping_model = OE.shipping= OE.conn.get_model('wholeherb_integration.shipping_method')
    oe_shipping = OE.shipping_data = PropertyDict((r.name, r.id) for r in get_records(shipping_model))
    print 'getting sales reps...'
    partner_model = OE.partner = OE.conn.get_model('res.partner')
    oe_sales_reps = PropertyDict((r.name, r) for r in get_records(
            partner_model,
            domain=[('customer','=',False),('supplier','=',False)],
            fields=['id', 'name'],
            ))
    print 'getting customers and vendors...'
    oe_customer = OE.partner_data = PropertyDict()
    oe_suppliers = PropertyDict(default=list)
    for rec in get_records(
            partner_model,
            domain=[('xml_id','!=','')],
            fields=['id', 'xml_id', 'module', 'name', 'child_ids'],
            ):
        if rec.module == 'csms':
            oe_customer[rec.xml_id] = rec
        else:
            entry = oe_suppliers[rec.xml_id]
            entry.append(rec)
            entry.sort()
    table = Table(file_name)
    with table:
        def index(rec):
            if isinstance(rec, dbf.Record) and dbf.recno(rec) == 0:
                return dbf.DoNotIndex
            if not rec[Field.order_id]:
                return dbf.DoNotIndex
            return rec[Field.order_id]
        order = table.create_index(index)
        print 'processing %s...' % file_name
        pb = ProgressBar(len(order))
        for rec in dbf.Templates(order):
            pb.tick()
            for fld in Field:
                rec[fld] = strip_field(rec[fld])
            values = PropertyDict()
            sales_person = rec[Field.employee_name]
            if sales_person in oe_sales_reps:
                values.employee_id = oe_sales_reps[sales_person].id
            values.order_date = (rec[Field.order_date]) or False
            customer_xmlid = rec[Field.customer_id]
            if customer_xmlid in oe_customer:
                customer = oe_customer[customer_xmlid]
                values.customer_id = customer.id
                contact_id = get_customer_contact(customer, *rec[Field.ship_name:Field.ship_date])
                if contact_id:
                    values.customer_contact_id = contact_id
            ship_date = rec[Field.ship_date].split(' ', 1)[0]
            if ship_date:
                values.ship_date = ship_date
            shipping_method = rec[Field.shipping_method]
            if shipping_method:
                if shipping_method not in oe_shipping:
                    sm_id = shipping_model.create(dict(name=shipping_method))
                    oe_shipping[shipping_method] = sm_id
                values.shipping_id = oe_shipping[shipping_method]
            comment = u'%-11s%-30s%-62s' % (rec[Field.comments1], rec[Field.comments2], rec[Field.comments3])
            comment = comment.strip('"').replace('\\n', '\n').strip()
            values.comments = comment
            order_num = rec[Field.order_id]
            if order_num not in oe_sample:
                values.order_num = order_num
                order_id = sample_model.create(dict(values))
                order_rec = get_records(
                        sample_model,
                        ids=order_id,
                        fields=['employee_id', 'order_date', 'customer_id', 'ship_date', 'comments'],
                        )
                oe_sample[order_num] = order_rec
            else:
                order_rec = oe_sample[order_num]
                sample_model.write(order_rec.id, dict(values))
    print 'done.'


@Command(
        sample_file=('dbf file to import preship sample data from', OPTION, None),
        supplier_file=('dbf file to import preship supplier data from', OPTION, None),
        nuke=('clear tables before import', FLAG, None, ),
        )
def preship_log(sample_file, supplier_file, nuke):
    """
    Import a file into wholeherb_integration.preship_sample and res_partner.

    example file name: PreShip_Sample_Log_[Sample2 | Suppliers ]_stage1.dbf 
    """
    class Sample(IntEnum):
        received_date = 0
        lot_no = 1
        desc = 2
        supplier_id = 3
        supplier_lot_no = 4
        comments = 5
        sales_rep = 6
        customer = 7
        approved = 8
        rnd_use = 9
    class Supplier(IntEnum):
        id = 0
        name = 1
        addr = 2
        city = 3
        state = 4
        postal = 5
        country = 6
        phone = 7
        fax = 8
    has_digits = translator(keep='0123456789')

    print 'connecting to OE...'
    OE = connect()
    OE.country = PropertyDict((r.name.lower(), r) for r in get_records(OE, 'res.country'))
    lot_model = OE.conn.get_model('wholeherb_integration.product_lot')
    print 'getting sales reps...'
    partner_model = OE.partner = OE.conn.get_model('res.partner')
    oe_sales_reps = PropertyDict((r.name.lower(), r) for r in get_records(
            partner_model,
            domain=[('customer','=',False),('supplier','=',False)],
            fields=['id', 'name'],
            ))
    print 'getting Product Lot records...'
    oe_lots = PropertyDict((r.lot_no, r) for r in get_records(lot_model, domain=[('lot_no_valid','=',True)]))
    preship_sample_model = OE.conn.get_model('wholeherb_integration.preship_sample')
    if nuke:
        if sample_file:
            ids = [r.id for r in get_records(preship_sample_model, domain=[(1,'=',1)], fields=['id'])]
            preship_sample_model.unlink(ids)
        if supplier_file:
            ids = [r.id for r in get_records(partner_model, domain=[('module','=','preship_supplier')], fields=['id'])]
            partner_model.unlink(ids)
    print 'getting PreShip Suppliers...'
    oe_suppliers = OE.suppliers = dict((r.xml_id, r) for r in get_records(
            partner_model,
            #domain=[('module','=','preship_supplier')],
            fields=['id','street','street2','city','state_id','zip','country_id','xml_id','module','adb_no'],
            ))
    oe_suppliers_by_address = [
            ((r.street, r.street2, r.city, r.state_id, r.zip, r.country_id), r.xml_id)
            for r in oe_suppliers.values()
            ]
    oe_suppliers_by_adb_id = dict(
            (r.adb_no, r.xml_id)
            for r in oe_suppliers.values()
            )
    print 'getting PreShip Sample records...'
    #oe_preship= PropertyDict((r.order_num, r) for r in get_records(preship_sample_model))
    print 'getting Product records (this will take a bit)...'
    product_model = OE.conn.get_model('product.product')
    oe_products = PropertyDict()
    oe_products_mash = dict()
    for item in get_records(
            OE,
            model='product.product',
            fields=['id', 'xml_id', 'name', 'default_code'],
            ):
        key = item.xml_id or item.default_code
        if not key:
            continue
        oe_products[key] = item
        pieces = item.name.lower().replace(',',' ').replace('.',' ').split()
        alpha = []
        numeric = []
        for pc in pieces:
            if has_digits(pc):
                numeric.append(pc)
            else:
                alpha.append(pc)
        alpha.sort()
        numeric.sort()
        oe_products_mash[key] = (' '.join(alpha), ' '.join(numeric), item.name)
    if supplier_file:
        with Table(supplier_file) as table:
            matched_by_address = 0
            def index(rec):
                if isinstance(rec, dbf.Record) and dbf.recno(rec) == 0:
                    return dbf.DoNotIndex
                return int(rec[Supplier.id])
            order = table.create_index(index)
            print 'processing %s...' % supplier_file
            pb = ProgressBar(len(order))
            for rec in dbf.Templates(order):
                pb.tick()
                for fld in Supplier:
                    rec[fld] = strip_field(rec[fld])
                values = sample_supplier(*rec[1:])
                location = values.street, values.street2, values.city, values.state_id, values.zip, values.country_id
                if location in oe_suppliers_by_address:
                    rec = oe_suppliers_by_address[location]
                    xml_id = rec.xml_id
                    module = rec.module
                    matched_by_address += 1
                else:
                    xml_id = rec[Supplier.id]
                    module = 'preship_supplier'
                if xml_id not in oe_suppliers:
                    values.xml_id = xml_id
                    values.module = module
                    values.adb_no = rec[Supplier.id]
                    values.is_company = True
                    values.customer = False
                    values.supplier = True
                    id = partner_model.create(dict(values))
                    oe_suppliers[xml_id] = id
                else:
                    partner_model.write(oe_suppliers[xml_id].id, {'adb_no':rec[Supplier.id]})
                oe_suppliers_by_adb_id[rec[Supplier.id]] = xml_id
            print '\nmatched by address: ', matched_by_address
    if sample_file:
        with Table(sample_file) as table:
            found = 0
            def index(rec):
                if isinstance(rec, dbf.Record) and dbf.recno(rec) == 0:
                    return dbf.DoNotIndex
                return dbf.recno(rec)
            order = table.create_index(index)
            print 'processing %s...' % sample_file
            pb = ProgressBar(len(order))
            for rec in dbf.Templates(order):
                pb.tick()
                for fld in Sample:
                    rec[fld] = strip_field(rec[fld])
                scores = []
                values = PropertyDict()
                for xml_id, jumble_name in oe_products_mash.items():
                    jumble_alpha, jumble_numeric, name = jumble_name
                    target_name = strip_field(rec[Sample.desc]).replace(',',' ').replace('.',' ').lower()
                    target_pieces = target_name.split()
                    target_alpha = []
                    target_numeric = []
                    for pc in target_pieces:
                        if has_digits(pc):
                            target_numeric.append(pc)
                        else:
                            target_alpha.append(pc)
                    target_alpha = ' '.join(sorted(target_alpha))
                    target_numeric = ' '.join(sorted(target_numeric))
                    if jumble_numeric == target_numeric and jumble_alpha == target_alpha:
                        found += 1
                        values.product_id = oe_products[xml_id].id
                        break
                else:
                    # couldn't find an exact match, so skip product link but save
                    # the original description from the AcessDB file
                    values.adb_desc = NameCase(rec[Sample.desc])
                if var(rec[Sample.received_date]):
                    values.received_date = unicode(DateTime(var()).date())
                else:
                    values.received_date = False
                values.lot_id = get_lot_id(
                        lot_model,
                        oe_lots,
                        rec[Sample.lot_no],
                        **{
                            'date_received':values.received_date,
                            'source_lot_no':rec[Sample.supplier_lot_no],
                        })
                if var(rec[Sample.supplier_id]):
                    values.supplier_id = oe_suppliers[oe_suppliers_by_adb_id[int(var())]].id
                values.comments = rec[Sample.comments]
                sales_rep = rec[Sample.sales_rep]
                if sales_rep.lower() in oe_sales_reps:
                    values.salesrep_id = oe_sales_reps[sales_rep.lower()].id
                else:
                    values.adb_salesrep = NameCase(sales_rep)
                values.customer = BsnsCase(rec[Sample.customer])
                values.approved = bool(rec[Sample.approved])
                values.rnd_use = bool(rec[Sample.rnd_use])
                preship_sample_model.create(dict(values))

Main()
