#!/usr/local/sbin/suid-python --virtualenv
from __future__ import print_function

from antipathy import Path
from openerplib import get_connection #, get_records
from scription import *

import os
import sys

CONFIG = Path('%s/config/fnx.ini' % os.environ['VIRTUAL_ENV'])

try:
    settings = OrmFile(CONFIG)
except Exception:
    print('WARNING: unable to process configfile; all parameters must be specified', verbose=0)
    HOST = ''
    USER = ''
    DB = ''
    PW = ''
else:
    HOST = settings.openerp.host
    USER = settings.openerp.user
    DB = settings.openerp.db
    PW = settings.openerp.pw

errors = []

@Script(
        host=('host where OpenERP instance is running', OPTION, None),
        db=('database to use', OPTION, None),
        user=('login name to use', OPTION, None),
        pw=('password for login name', OPTION, None),
        )
def main(host, db, user, pw):
    global OE
    if host:
        module.HOST = host
    if db:
        module.DB = db
    if user:
        module.USER = user
    if pw:
        module.PW = pw
    for req in ('HOST', 'USER', 'DB'):
        if not module[req]:
            raise SystemExit('%r required; use --help for more info' % req)
    if not module.PW:
        module.PW = get_response('password:')
    OE = get_connection(hostname=HOST, database=DB, login=USER, password=PW)

@Command(
        src=Spec('network location of files', ),
        dst=Spec('local path to store files', ),
        )
def sync(src, dst):
    "synchronize files between SRC and DST"
    result = Execute(
            "rsync -auv --exclude .~lock* %s %s" % (src, dst),
            password=settings.network.pw,
            pty=True,
            )
    if result.stdout:
        if result.returncode:
            echo(result.stdout, end='')
        else:
            print(result.stdout, end='')
    if result.stderr:
        error(result.stderr, end='')
    raise SystemExit(result.returncode)


@Command(
        path=Spec('location of pdfs to sort and import', type=Path),
        id=Spec('id pattern to match', OPTION, type=unicode.upper),
        max_copies=Spec('how many archival copies to keep [default: no limit]', OPTION, type=int),
        )
def c_of_a(path, id, max_copies):
    '''
    copy, move, and sort source pdfs into fnxfs file structure according to
    settings found in product.prodect
    '''
    #
    # rsync -auv --exclude '.~lock*' root@192.168.2.61:/mnt/virtualxp/JRA_Docs/. /home/JRA_Docs/.
    #
    file_id = id
    if file_id:
        print('looking in %s for files matching %s' % (path, file_id))
    else:
        print('looking in %s' % (path, ))
    files = path.listdir()
    for file in ViewProgress(files):
        if file_id and file_id not in file:
            continue
        if file.ext.lower() != '.pdf':
            print('skipping non-pdf: %r' % file, verbose=2)
            continue
        if not file[:3].isalpha() or not file[3:8].isdigit() or file[8] not in ' .':
            if not file_id:
                print('skipping invalid name: %s  (bad chars)' % file, verbose=2)
            continue
        xml_id = file[:8]
        target_path = 'product.product/xml_id=%s/c_of_a' % xml_id
        target_file = file.stem.upper() + file.ext.lower()
        target = Path(target_path, target_file)
        source = path/file
        _run('cp', source, target)


#-----------------
# private commands
#-----------------

def _run(*command):
    command = list(command)
    params = ['/usr/local/bin/fnxfs', ] + command #+ ['-v'] * script_verbosity
    print(' '.join(params), end='\n\n', verbose=2)
    try:
        exc = None
        dst = stdout
        attempt = Execute(params, pty=True, timeout=60)
        returncode = attempt.returncode
    except ExecuteError:
        exc = sys.exc_info()[1]
        dst = stderr
        attempt = exc.process
        print(exc, 'output from command:', sep='\n', file=stderr)
        raise SystemExit(returncode)
    if attempt.stdout:
        print(attempt.stdout, file=dst, verbose=2)
    if attempt.stderr:
        errors.append(attempt.stderr)
        # print(attempt.stderr, file=stderr)
        # raise SystemExit(returncode)

try:
    Run()
finally:
    if errors:
        error(''.join(errors))
        raise SystemExit(-1)
